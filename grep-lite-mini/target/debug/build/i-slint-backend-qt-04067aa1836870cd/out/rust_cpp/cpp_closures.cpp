
/* THIS FILE IS GENERATED BY rust-cpp. DO NOT EDIT */

#include "stdint.h" // For {u}intN_t
#include <new> // For placement new
#include <cstdlib> // For abort
#include <type_traits>
#include <utility>

namespace rustcpp {

// We can't just pass or return any type from extern "C" rust functions (because the call
// convention may differ between the C++ type, and the Rust type).
// So we make sure to pass trivial structure that only contains a pointer to the object we want to
// pass. The constructor of these helper class contains a 'container' of the right size which will
// be allocated on the stack.
template<typename T> struct return_helper {
    struct container {
#if defined (_MSC_VER) && (_MSC_VER + 0 < 1900)
        char memory[sizeof(T)];
        ~container() { reinterpret_cast<T*>(this)->~T(); }
#else
        // The fact that it is in an union means it is properly sized and aligned, but we have
        // to call the destructor and constructor manually
        union { T memory; };
        ~container() { memory.~T(); }
#endif
        container() {}
    };
    const container* data;
    return_helper(int, const container &c = container()) : data(&c) { }
};

template<typename T> struct argument_helper {
    using type = const T&;
};
template<typename T> struct argument_helper<T&> {
    T &ref;
    argument_helper(T &x) : ref(x) {}
    using type = argument_helper<T&> const&;
};

template<typename T>
typename std::enable_if<std::is_copy_constructible<T>::value>::type copy_helper(const void *src, void *dest)
{ new (dest) T (*static_cast<T const*>(src)); }
template<typename T>
typename std::enable_if<!std::is_copy_constructible<T>::value>::type copy_helper(const void *, void *)
{ std::abort(); }
template<typename T>
typename std::enable_if<std::is_default_constructible<T>::value>::type default_helper(void *dest)
{ new (dest) T(); }
template<typename T>
typename std::enable_if<!std::is_default_constructible<T>::value>::type default_helper(void *)
{ std::abort(); }

template<typename T> int compare_helper(const T &a, const T&b, int cmp) {
    switch (cmp) {
        using namespace std::rel_ops;
        case 0:
            if (a < b)
                return -1;
            if (b < a)
                return 1;
            return 0;
        case -2: return a < b;
        case 2: return a > b;
        case -1: return a <= b;
        case 1: return a >= b;
    }
    std::abort();
}
}

#define RUST_CPP_CLASS_HELPER(HASH, ...) \
    extern "C" { \
    void __cpp_destructor_##HASH(void *ptr) { typedef __VA_ARGS__ T; static_cast<T*>(ptr)->~T(); } \
    void __cpp_copy_##HASH(const void *src, void *dest) { rustcpp::copy_helper<__VA_ARGS__>(src, dest); } \
    void __cpp_default_##HASH(void *dest) { rustcpp::default_helper<__VA_ARGS__>(dest); } \
    }
#line 144 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
    void (*rust_cpp_callbacks17476396009874180260[5])() = {};
}
        
extern "C" void Slint_delete_event_holder();
extern "C" void Slint_call_event_holder();
#line 222 "lib.rs"
                       
                   struct TraitObject { void *a, *b; };
                   struct EventHolder {
                       TraitObject fnbox = {nullptr, nullptr};
                       ~EventHolder() {
                           if (fnbox.a != nullptr || fnbox.b != nullptr) {
                               reinterpret_cast<void (*)(rustcpp::argument_helper<TraitObject>::type)>(Slint_delete_event_holder)(fnbox)

;
                           }
                       }
                       EventHolder(TraitObject f) : fnbox(f)  {}
                       EventHolder(const EventHolder&) = delete;
                       EventHolder& operator=(const EventHolder&) = delete;
                       EventHolder(EventHolder&& other) : fnbox(other.fnbox) {
                            other.fnbox = {nullptr, nullptr};
                       }
                       void operator()() {
                            if (fnbox.a != nullptr || fnbox.b != nullptr) {
                                TraitObject fnbox = std::move(this->fnbox);
                                this->fnbox = {nullptr, nullptr};
                                reinterpret_cast<void (*)(rustcpp::argument_helper<TraitObject>::type)>(Slint_call_event_holder)(fnbox)


;
                            }
                       }
                   };
                
extern "C" void Descendents_ctor();
extern "C" void Descendents_count();
extern "C" void Descendents_itemAt();
extern "C" void Descendents_roleAt();
extern "C" void Descendents_dtor();
extern "C" void root_item_for_window_();
extern "C" void item_string_property_();
extern "C" void Slint_accessible_findItem();
extern "C" void Slint_accessible_item_rect();
extern "C" void Slint_accessible_item_ctor();
extern "C" void Slint_accessible_item_dtor();
extern "C" void Slint_accessible_item_rustItem();
extern "C" void Slint_accessible_item_delegate_focus();
extern "C" void Slint_accessible_setCurrentValue();
extern "C" void Slint_accessible_item_supported();
extern "C" void Slint_accessible_item_an1();
extern "C" void Slint_accessible_item_an2();
extern "C" void Slint_accessible_item_an3();
extern "C" void Slint_accessible_item_do_action1();
extern "C" void Slint_accessible_item_do_action2();
extern "C" void Slint_accessible_item_do_action3();
extern "C" void Slint_accessible_window_dtor();
extern "C" void Slint_delete_stale_items();
extern "C" void Slint_indexOfItems();
#line 259 "qt_accessible.rs"
       
    #include <QtWidgets/QtWidgets>

    #include <memory>

    /// KEEP IN SYNC WITH CONSTANTS IN RUST!
    const uint32_t CHECKED { QAccessible::UserText };
    const uint32_t VALUE_MINIMUM { CHECKED + 1 };
    const uint32_t VALUE_MAXIMUM { VALUE_MINIMUM + 1 };
    const uint32_t VALUE_STEP { VALUE_MAXIMUM + 1 };
    const uint32_t CHECKABLE { VALUE_STEP + 1 };

    // ------------------------------------------------------------------------------
    // Helper:
    // ------------------------------------------------------------------------------

    class Descendents {
    public:
        Descendents(void *root_item) {
            rustDescendents = std::move(*reinterpret_cast<void**(*)(rustcpp::argument_helper<void*>::type, rustcpp::return_helper<void*>)>(Descendents_ctor)(root_item, 0))




;
        }

        size_t count() const {
            return std::move(*reinterpret_cast<size_t*(*)(rustcpp::argument_helper<void*>::type, rustcpp::return_helper<size_t>)>(Descendents_count)(rustDescendents, 0))

;
        }

        void* itemAt(size_t index) {
            return std::move(*reinterpret_cast<void**(*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<size_t>::type, rustcpp::return_helper<void*>)>(Descendents_itemAt)(rustDescendents, index, 0))






;
        }

        QAccessible::Role roleAt(size_t index) const {
            return std::move(*reinterpret_cast<QAccessible::Role*(*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<size_t>::type, rustcpp::return_helper<QAccessible::Role>)>(Descendents_roleAt)(rustDescendents, index, 0))





















;
        }

        ~Descendents() {
            auto descendentsPtr = &rustDescendents;
            reinterpret_cast<void (*)(rustcpp::argument_helper<void**>::type)>(Descendents_dtor)(descendentsPtr)

;
        }

    private:
        void *rustDescendents;
    };

    void *root_item_for_window(void *rustWindow) {
        return std::move(*reinterpret_cast<void**(*)(rustcpp::argument_helper<void*>::type, rustcpp::return_helper<void*>)>(root_item_for_window_)(rustWindow, 0))



;
    }

    QString item_string_property(void *data, uint32_t what) {
        return std::move(*reinterpret_cast<QString*(*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<uint32_t>::type, rustcpp::return_helper<QString>)>(item_string_property_)(data, what, 0))




















;
    }

    // ------------------------------------------------------------------------------
    // Slint_accessible:
    // ------------------------------------------------------------------------------

    // Base object for accessibility support
    class Slint_accessible : public QAccessibleInterface {
    public:
        Slint_accessible(QAccessible::Role role, QAccessibleInterface *parent) :
             has_focus(false), has_focus_delegation(false), m_role(role), m_parent(parent)
        { }

        ~Slint_accessible() {
            qDeleteAll(m_children);
        }

        virtual void *rustItem() const = 0;

        // Returns the SlintWidget of the window... we have no other.
        virtual QWidget *qwidget() const = 0;

        QPoint mapToGlobal(const QPoint p) const {
            return qwidget()->mapToGlobal(p);
        }

        QPoint mapFromGlobal(const QPoint p) const {
            return qwidget()->mapFromGlobal(p);
        }

        void clearFocus() {
            has_focus = false;
            has_focus_delegation = false;

            for (int i = 0; i < rawChildCount(); ++i) {
                static_cast<Slint_accessible *>(child(i))->clearFocus();
            }
        }

        virtual void delegateFocus() const {
            sendFocusChangeEvent();
        }

        // Returns true if the item accepted the focus; false otherwise.
        bool focusItem(void *item) const {
            auto my_item = rustItem();
            if (std::move(*reinterpret_cast<bool*(*)(rustcpp::argument_helper<void *>::type, rustcpp::argument_helper<void*>::type, rustcpp::return_helper<bool>)>(Slint_accessible_findItem)(item, my_item, 0))

) {
                has_focus = true;

                delegateFocus();
                return true;
            }

            for (int i = 0; i < rawChildCount(); ++i) {
                if (static_cast<Slint_accessible *>(child(i))->focusItem(item)) {
                    return true;
                }
            }
            return false;
        }

        void sendFocusChangeEvent() const {
            auto event = QAccessibleEvent(object(), QAccessible::Focus);
            QAccessible::updateAccessibility(&event);
            has_focus_delegation = true;
        }

        bool isValid() const override {
            return true;
        }

        // navigation, hierarchy
        QAccessibleInterface *parent() const override {
            return m_parent;
        }

        QAccessibleInterface *focusChild() const override {
            if (has_focus_delegation) {
                return const_cast<QAccessibleInterface *>(static_cast<const QAccessibleInterface *>(this));
            }
            for (int i = 0; i < childCount(); ++i)  {
                if (auto focus = child(i)->focusChild()) return focus;
            }
            return nullptr;
        }

        int indexOfChild(const QAccessibleInterface *child) const override {
            return m_children.indexOf(child->object()); // FIXME: Theoretically we can have several QAIs per QObject!
        }

        // Will *not* trigger a build of the accessibility item tree!
        // Use this from the Slint side to make sure the accessibility
        // item tree is not generated needlessly.
        int rawChildCount() const {
            return m_children.count();
        }

        /// Will *not* trigger a build of the accessibility tree!
        QAccessibleInterface *rawChild(int index) const {
            if (0 <= index && index < rawChildCount())
                return QAccessible::queryAccessibleInterface(m_children[index]);
            return nullptr;
        }

        // May trigger a build of the accessibility item tree!
        // Use this from the Qt API side (which is triggered by the OS accessibility
        // layer to make sure accessibility information is up-to-date.
        int childCount() const override {
            return rawChildCount();
        }

        QAccessibleInterface *child(int index) const override {
            if (0 <= index && index < childCount())
                return QAccessible::queryAccessibleInterface(m_children[index]);
            return nullptr;
        }

        void setText(QAccessible::Text t, const QString &text) override {
            Q_UNUSED(t); Q_UNUSED(text);
        }

        QAccessible::Role role() const override {
            return m_role;
        }

        QRect rect() const override {
            auto item = rustItem();
            QRectF r = std::move(*reinterpret_cast<QRectF*(*)(rustcpp::argument_helper<void*>::type, rustcpp::return_helper<QRectF>)>(Slint_accessible_item_rect)(item, 0))















;
            auto topLeft = mapToGlobal(QPoint(static_cast<int>(r.left()), static_cast<int>(r.top())));
            auto bottomRight = mapToGlobal(QPoint(static_cast<int>(r.right()), static_cast<int>(r.bottom())));
            return QRect(topLeft, bottomRight);
        }

        QAccessibleInterface *childAt(int x, int y) const override {
            for (int i = 0; i < childCount(); ++i)  {
                auto c = child(i);
                auto r = c->rect();
                if (r.contains(x, y)) return c;
            }
            return nullptr;
        }

        void updateAccessibilityTree() const;

    protected:
        mutable bool has_focus;
        mutable bool has_focus_delegation;

    private:
        QAccessible::Role m_role = QAccessible::NoRole;
        QAccessibleInterface *m_parent = nullptr;
        mutable QList<QObject*> m_children;
    };

    // ------------------------------------------------------------------------------
    // Slint_accessible_item:
    // ------------------------------------------------------------------------------

    class Slint_accessible_item : public Slint_accessible, public QAccessibleValueInterface, public QAccessibleActionInterface {
    public:
        Slint_accessible_item(void *item, QObject *obj, QAccessible::Role role, QAccessibleInterface *parent) :
            Slint_accessible(role, parent), m_object(obj)
        {
            m_data = std::move(*reinterpret_cast<void**(*)(rustcpp::argument_helper<QObject*>::type, rustcpp::argument_helper<void*>::type, rustcpp::return_helper<void*>)>(Slint_accessible_item_ctor)(obj, item, 0))




;
        }

        QAccessibleActionInterface *actionInterface() { return this; }
        QAccessibleValueInterface *valueInterface() { return this; }


        ~Slint_accessible_item() {
            reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type)>(Slint_accessible_item_dtor)(m_data)

;
        }

        void *rustItem() const override {
            return std::move(*reinterpret_cast<void**(*)(rustcpp::argument_helper<void*>::type, rustcpp::return_helper<void*>)>(Slint_accessible_item_rustItem)(m_data, 0))

;
        }

        QObject *object() const override {
            return m_object;
        }

        QWidget *qwidget() const override {
            return dynamic_cast<Slint_accessible *>(parent())->qwidget();
        }

        void *data() const {
            return m_data;
        }

        QWindow *window() const override {
            return parent()->window();
        }

        void delegateFocus() const override {
            if (!has_focus) { return; }

            auto index = std::move(*reinterpret_cast<int*(*)(rustcpp::argument_helper<void*>::type, rustcpp::return_helper<int>)>(Slint_accessible_item_delegate_focus)(m_data, 0))



;

            if (index >= 0 && index < rawChildCount()) {
                static_cast<Slint_accessible_item*>(rawChild(index))->sendFocusChangeEvent();
            } else {
                sendFocusChangeEvent();
            }
        }

        // properties and state
        QString text(QAccessible::Text t) const override {
            return item_string_property(m_data, t);
        }

        QAccessible::State state() const override {
            auto checked = item_string_property(m_data, CHECKED);

            QAccessible::State state;
            state.active = 1;
            state.focusable = 1;
            state.focused = has_focus_delegation;
            state.checked = (checked == "true") ? 1 : 0;
            state.checkable = (item_string_property(m_data, CHECKABLE) == "true") ? 1 : 0;
            return state; /* FIXME */
        }

        void *interface_cast(QAccessible::InterfaceType t) override {
            if (t == QAccessible::ValueInterface && !item_string_property(m_data, QAccessible::Value).isEmpty()) {
                return static_cast<QAccessibleValueInterface*>(this);
            } else if (t == QAccessible::ActionInterface) {
                return static_cast<QAccessibleActionInterface*>(this);
            }
            return QAccessibleInterface::interface_cast(t);
        }

        // AccessibleValueInterface:
        QVariant currentValue() const override {
            return item_string_property(m_data, QAccessible::Value);
        }

        void setCurrentValue(const QVariant &value) override {
            QString value_string = value.toString();
            reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<QString>::type)>(Slint_accessible_setCurrentValue)(m_data, value_string)


;
        }

        QVariant maximumValue() const override {
            return item_string_property(m_data, VALUE_MAXIMUM);
        }

        QVariant minimumValue() const override {
            return item_string_property(m_data, VALUE_MINIMUM);
        }

        QVariant minimumStepSize() const override {
            return item_string_property(m_data, VALUE_STEP);
        }

        QStringList actionNames() const override {
            int supported = std::move(*reinterpret_cast<uint*(*)(rustcpp::argument_helper<void*>::type, rustcpp::return_helper<uint>)>(Slint_accessible_item_supported)(m_data, 0))

;
            QStringList actions;
            if (supported & std::move(*reinterpret_cast<uint*(*)(rustcpp::return_helper<uint>)>(Slint_accessible_item_an1)(0)))
                actions << QAccessibleActionInterface::pressAction();
            if (supported & std::move(*reinterpret_cast<uint*(*)(rustcpp::return_helper<uint>)>(Slint_accessible_item_an2)(0)))
                actions << QAccessibleActionInterface::increaseAction();
            if (supported & std::move(*reinterpret_cast<uint*(*)(rustcpp::return_helper<uint>)>(Slint_accessible_item_an3)(0)))
                actions << QAccessibleActionInterface::decreaseAction();
            return actions;
        }

        void doAction(const QString &actionName) override {
            if (actionName == QAccessibleActionInterface::pressAction()) {
                reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type)>(Slint_accessible_item_do_action1)(m_data)


;
            } else if (actionName == QAccessibleActionInterface::increaseAction()) {
                reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type)>(Slint_accessible_item_do_action2)(m_data)


;
            } else if (actionName == QAccessibleActionInterface::decreaseAction()) {
                reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type)>(Slint_accessible_item_do_action3)(m_data)


;
            }
        }

        QStringList keyBindingsForAction(const QString &) const override {
            return QStringList();
        }

    private:
        QObject *m_object = nullptr;
        mutable void *m_data = nullptr;
    };

    // ------------------------------------------------------------------------------
    // Slint_accessible_window:
    // ------------------------------------------------------------------------------

    class Slint_accessible_window : public Slint_accessible {
    public:
        Slint_accessible_window(QWidget *widget, void *rust_window) :
            Slint_accessible(QAccessible::Window, QAccessible::queryAccessibleInterface(qApp)),
            m_widget(widget),
            m_rustWindow(rust_window)
        { }

        ~Slint_accessible_window()
        {
            reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type)>(Slint_accessible_window_dtor)(m_rustWindow)

;
        }

        bool isUsed() const {
            return is_used;
        }

        void *rustItem() const override {
            return root_item_for_window(m_rustWindow);
        }

        QObject *object() const override {
            return m_widget;
        }

        QWidget *qwidget() const override {
            return m_widget;
        }

        QWindow *window() const override {
            return qobject_cast<QWidget *>(object())->windowHandle();
        }

        int childCount() const override {
            if (!is_used) { updateAccessibilityTree(); }
            is_used = true;
            return Slint_accessible::childCount();
        }

        // properties and state
        QString text(QAccessible::Text t) const override {
            switch (t) {
                case QAccessible::Name: return qobject_cast<QWidget*>(object())->windowTitle();
                default: return QString();
            }
        }

        QAccessible::State state() const override {
            QAccessible::State state;
            state.active = 1;
            state.focusable = 1;
            return state;
        }

    private:
        QWidget *m_widget;
        void *m_rustWindow; // *const QtWindow
        mutable bool is_used = false;
    };

    QList<QObject *> deleteStaleItems(QList<QObject *> &&current_children) {
        // Delete no longer valid objects:
        current_children.erase(std::remove_if(current_children.begin(), current_children.end(), [](QObject *o) {
            auto ai = dynamic_cast<Slint_accessible_item *>(QAccessible::queryAccessibleInterface(o));
            Q_ASSERT(ai);
            auto data = ai->data();

            if (std::move(*reinterpret_cast<bool*(*)(rustcpp::argument_helper<void*>::type, rustcpp::return_helper<bool>)>(Slint_delete_stale_items)(data, 0))


) {
                o->deleteLater();
                return true;
            } else {
                return false;
            }
        }), current_children.end());

        return std::move(current_children);
    }

    int indexOfItem(const QList<QObject *> &existing, void *item) {
        for (int i = 0; i < existing.count(); ++i) {
            auto data = dynamic_cast<Slint_accessible_item *>(QAccessible::queryAccessibleInterface(existing[i]));
            if (std::move(*reinterpret_cast<bool*(*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<void*>::type, rustcpp::return_helper<bool>)>(Slint_indexOfItems)(data, item, 0))

) {
                return i;
            }
        }
        return -1;
    }

    QList<QObject *> updateItems(QList<QObject *> &&current_children,
                                 Descendents &descendents,
                                 Slint_accessible *parent) {
        QList<QObject *> children = {};
        children.reserve(descendents.count());

        for (size_t i = 0; i < descendents.count(); ++i) {
            auto item = descendents.itemAt(i);
            auto index = indexOfItem(current_children, item);
            QObject *object = nullptr;
            Slint_accessible_item *ai = nullptr;

            if (index == -1) {
                // Create new item:
                object = new QObject();
                auto role = descendents.roleAt(i);
                ai = new Slint_accessible_item(item, object, role, parent);

                QAccessible::registerAccessibleInterface(ai);
            } else {
                // Reuse existing item:
                object = current_children[index];
                ai = dynamic_cast<Slint_accessible_item *>(QAccessible::queryAccessibleInterface(object));

                current_children.removeAt(index);
            }

            Q_ASSERT(ai);
            Q_ASSERT(object);

            ai->updateAccessibilityTree();

            children.append(object);
        }

        return children;
    }

    void Slint_accessible::updateAccessibilityTree() const {
        QList<QObject *> valid_objects = deleteStaleItems(std::move(m_children));
        auto descendents = Descendents(rustItem());

        m_children = updateItems(std::move(valid_objects), descendents,
                                 const_cast<Slint_accessible *>(this));
    }

extern "C" void Slint_get_executable_name();
extern "C" void Slint_AnimatedWidget_update();
#line 147 "qt_widgets.rs"
       
    #include <QtWidgets/QApplication>
    #include <QtWidgets/QStyle>
    #include <QtWidgets/QStyleOption>
    #include <QtWidgets/QStyleFactory>
    #include <QtGui/QPainter>
    #include <QtGui/QClipboard>
    #include <QtCore/QMimeData>
    #include <QtCore/QDebug>
    #include <QtCore/QScopeGuard>

    using QPainterPtr = std::unique_ptr<QPainter>;

    static bool g_lastWindowClosed = false; // Wohoo, global to track window closure when using processEvents().

    /// Make sure there is an instance of QApplication.
    /// The `from_qt_backend` argument specifies if we know that we are running
    /// the Qt backend, or if we are just drawing widgets
    void ensure_initialized(bool from_qt_backend = false)
    {
        if (qApp) {
            return;
        }
        if (!from_qt_backend) {
            // When not using the Qt backend, Qt is not in control of the event loop
            // so we should set this flag.
            QCoreApplication::setAttribute(Qt::AA_PluginApplication, true);
        }

        static QByteArray executable = std::move(*reinterpret_cast<QByteArray*(*)(rustcpp::return_helper<QByteArray>)>(Slint_get_executable_name)(0))

;

        static int argc  = 1;
        static char *argv[] = { executable.data() };
        // Leak the QApplication, otherwise it crashes on exit
        // (because the QGuiApplication destructor access some Q_GLOBAL_STATIC which are already gone)
        new QApplication(argc, argv);
        qApp->setQuitOnLastWindowClosed(false);
    }

    // HACK ALERT: This struct declaration is duplicated in api/cpp/bindgen.rs - keep in sync.
    struct SlintTypeErasedWidget
    {
        virtual ~SlintTypeErasedWidget() = 0;
        SlintTypeErasedWidget() = default;
        SlintTypeErasedWidget(const SlintTypeErasedWidget&) = delete;
        SlintTypeErasedWidget& operator=(const SlintTypeErasedWidget&) = delete;

        virtual void *qwidget() = 0;
    };

    SlintTypeErasedWidget::~SlintTypeErasedWidget() = default;

    template <typename Base>
    struct SlintAnimatedWidget: public Base, public SlintTypeErasedWidget {
        void *animation_update_property_ptr;
        bool event(QEvent *event) override {
            // QEvent::StyleAnimationUpdate is sent by QStyleAnimation used by Qt builtin styles
            // And we hacked some attribute so that QWidget::update() will emit UpdateLater
            if (event->type() == QEvent::StyleAnimationUpdate  || event->type() == QEvent::UpdateLater) {
                reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type)>(Slint_AnimatedWidget_update)(animation_update_property_ptr)

;
                event->accept();
                return true;
            } else {
                return Base::event(event);
            }
        }
        // This seemingly useless cast is needed to adjust the this pointer correctly to point to Base.
        void *qwidget() override { return static_cast<QWidget*>(this); }
    };

    template <typename Base>
    std::unique_ptr<SlintTypeErasedWidget> make_unique_animated_widget(void *animation_update_property_ptr)
    {
        ensure_initialized();
        auto ptr = std::make_unique<SlintAnimatedWidget<Base>>();
        // For our hacks to work, we need to have some invisible parent widget.
        static QWidget globalParent;
        ptr->setParent(&globalParent);
        // Let Qt thinks the widget is visible even if it isn't so update() from animation is forwarded
        ptr->setAttribute(Qt::WA_WState_Visible, true);
        // Hack so update() send a UpdateLater event
        ptr->setAttribute(Qt::WA_WState_InPaintEvent, true);
        ptr->animation_update_property_ptr = animation_update_property_ptr;
        return ptr;
    }

#line 249 "qt_widgets.rs"
       
    // Some style function calls setClipRect or setClipRegion on the painter and replace the clips.
    // eg CE_ItemViewItem, CE_Header, or CC_GroupBox in QCommonStyle (#3541).
    // We do workaround that by setting the clip as a system clip so it cant be overwritten
    struct PainterClipWorkaround {
        QPainter *painter;
        QRegion old_clip;
        explicit PainterClipWorkaround(QPainter *painter) : painter(painter) {
            auto engine = painter->paintEngine();
            old_clip = engine->systemClip();
            auto new_clip = painter->clipRegion() * painter->transform();
            if (!old_clip.isNull())
                new_clip &= old_clip;
            engine->setSystemClip(new_clip);
        }
        ~PainterClipWorkaround() {
            auto engine = painter->paintEngine();
            engine->setSystemClip(old_clip);
            // Qt is seriously bugged, setSystemClip will be scaled by the scale factor
            auto actual_clip = engine->systemClip();
            if (actual_clip != old_clip) {
                QSizeF s2 = actual_clip.boundingRect().size();
                QSizeF s1 = old_clip.boundingRect().size();
                engine->setSystemClip(old_clip * QTransform::fromScale(s1.width() / s2.width(), s1.height() / s2.height()));
            }
        }
        PainterClipWorkaround(const PainterClipWorkaround&) = delete;
        PainterClipWorkaround& operator=(const PainterClipWorkaround&) = delete;
    };

#line 40 "qt_widgets/spinbox.rs"
       
void initQSpinBoxOptions(QStyleOptionSpinBox &option, bool pressed, bool enabled, int active_controls) {
auto style = qApp->style();
option.activeSubControls = QStyle::SC_None;
option.subControls = QStyle::SC_SpinBoxEditField | QStyle::SC_SpinBoxUp | QStyle::SC_SpinBoxDown;
if (style->styleHint(QStyle::SH_SpinBox_ButtonsInsideFrame, nullptr, nullptr))
    option.subControls |= QStyle::SC_SpinBoxFrame;
option.activeSubControls = {active_controls};
if (enabled) {
    option.state |= QStyle::State_Enabled;
} else {
    option.palette.setCurrentColorGroup(QPalette::Disabled);
}
if (pressed) {
    option.state |= QStyle::State_Sunken | QStyle::State_MouseOver;
}
/*if (active_controls) {
        option.state |= QStyle::State_MouseOver;
    }*/
option.stepEnabled = QAbstractSpinBox::StepDownEnabled | QAbstractSpinBox::StepUpEnabled;
option.frame = true;
}

#line 44 "qt_widgets/slider.rs"
       
void initQSliderOptions(QStyleOptionSlider &option, bool pressed, bool enabled, int active_controls, int minimum, int maximum, int value, bool vertical) {
    option.subControls = QStyle::SC_SliderGroove | QStyle::SC_SliderHandle;
    option.activeSubControls = { active_controls };
    if (vertical) {
        option.orientation = Qt::Vertical;
    } else {
        option.orientation = Qt::Horizontal;
        option.state |= QStyle::State_Horizontal;
    }
    option.maximum = maximum;
    option.minimum = minimum;
    option.sliderPosition = value;
    option.sliderValue = value;
    if (enabled) {
        option.state |= QStyle::State_Enabled;
    } else {
        option.palette.setCurrentColorGroup(QPalette::Disabled);
    }
    if (pressed) {
        option.state |= QStyle::State_Sunken | QStyle::State_MouseOver;
    }
}

#line 31 "qt_widgets/groupbox.rs"
       
    QStyleOptionGroupBox create_group_box_option(QString title) {
        QStyleOptionGroupBox option;
        option.text = title;
        option.lineWidth = 1;
        option.midLineWidth = 0;
        option.subControls = QStyle::SC_GroupBoxFrame;
        if (!title.isEmpty()) {
            option.subControls |= QStyle::SC_GroupBoxLabel;
        }
        option.textColor = QColor(qApp->style()->styleHint(
            QStyle::SH_GroupBox_TextLabelColor, &option));

        return option;
    }

#line 53 "qt_widgets/tabwidget.rs"
                struct TabWidgetMetrics { qreal content_start, content_size, tabbar_start, tabbar_size; }; 
extern "C" void Slint_style_change_event();
#line 10 "qt_widgets/stylemetrics.rs"
       
namespace {
struct StyleChangeListener : QWidget {
    const void *nativeStyleMetrics = nullptr;
    StyleChangeListener(const void *nativeStyleMetrics) : nativeStyleMetrics(nativeStyleMetrics) {}
    bool event(QEvent *event) override {
        auto ty = event->type();
        if (ty == QEvent::StyleChange || ty == QEvent::PaletteChange || ty == QEvent::FontChange) {
            reinterpret_cast<void (*)(rustcpp::argument_helper<const void*>::type)>(Slint_style_change_event)(nativeStyleMetrics)

;
        }
        return QWidget::event(event);
    }
};
}

extern "C" void Slint_qt_style_change_event();
#line 10 "qt_widgets/palette.rs"
       
namespace {
struct PaletteStyleChangeListener : QWidget {
    const void *qtStylePalette = nullptr;
    PaletteStyleChangeListener(const void *qtStylePalette) : qtStylePalette(qtStylePalette) {}
    bool event(QEvent *event) override {
        auto ty = event->type();
        if (ty == QEvent::StyleChange || ty == QEvent::PaletteChange || ty == QEvent::FontChange) {
            reinterpret_cast<void (*)(rustcpp::argument_helper<const void*>::type)>(Slint_qt_style_change_event)(qtStylePalette)

;
        }
        return QWidget::event(event);
    }
};
}

extern "C" void Slint_timerEvent();
extern "C" void Slint_paintEvent();
extern "C" void Slint_resizeEvent();
extern "C" void Slint_mousePressEvent();
extern "C" void Slint_mouseReleaseEventPopup();
extern "C" void Slint_mouseReleaseEvent();
extern "C" void Slint_mouseReleaseEventClosePopup();
extern "C" void Slint_mouseMoveEvent();
extern "C" void Slint_mouseWheelEvent();
extern "C" void Slint_mouseLeaveEvent();
extern "C" void Slint_keyPress();
extern "C" void Slint_keyRelease();
extern "C" void Slint_updateWindowActivation();
extern "C" void Slint_updateWindowDarkColorScheme();
extern "C" void Slint_syncWindowState();
extern "C" void Slint_requestClose();
extern "C" void Slint_sizeHint();
extern "C" void Slint_inputMethodEvent();
#line 42 "qt_window.rs"
       
    #include <QtWidgets/QtWidgets>
    #include <QtWidgets/QGraphicsScene>
    #include <QtWidgets/QGraphicsBlurEffect>
    #include <QtWidgets/QGraphicsPixmapItem>
    #include <QtGui/QAccessible>
    #include <QtGui/QPainter>
    #include <QtGui/QPaintEngine>
    #include <QtGui/QPainterPath>
    #include <QtGui/QWindow>
    #include <QtGui/QResizeEvent>
    #include <QtGui/QTextLayout>
    #include <QtGui/QImageReader>
    #include <QtGui/QCursor>
    #include <QtCore/QBasicTimer>
    #include <QtCore/QTimer>
    #include <QtCore/QPointer>
    #include <QtCore/QBuffer>
    #include <QtCore/QEvent>
    #include <QtCore/QFileInfo>

    #include <memory>

    void ensure_initialized(bool from_qt_backend);

    using QPainterPtr = std::unique_ptr<QPainter>;

    struct TimerHandler : QObject {
        QBasicTimer timer;
        static TimerHandler& instance() {
            static TimerHandler instance;
            return instance;
        }

        void timerEvent(QTimerEvent *event) override {
            if (event->timerId() != timer.timerId()) {
                QObject::timerEvent(event);
                return;
            }
            timer.stop();
            reinterpret_cast<void (*)()>(Slint_timerEvent)();
        }

    };

    struct SlintWidget : QWidget {
        void *rust_window = nullptr;
        bool isMouseButtonDown = false;
        QRect ime_position;
        QString ime_text;
        int ime_cursor = 0;
        int ime_anchor = 0;

        SlintWidget() {
            setMouseTracking(true);
            setFocusPolicy(Qt::StrongFocus);
            setAttribute(Qt::WA_TranslucentBackground);
            // WA_TranslucentBackground sets WA_NoSystemBackground, but we actually need WA_NoSystemBackground
            // to draw the window background which is set on the palette.
            // (But the window background might not be opaque)
            setAttribute(Qt::WA_NoSystemBackground, false);
        }

        void paintEvent(QPaintEvent *) override {
            if (!rust_window)
                return;
           auto painter = std::unique_ptr<QPainter>(new QPainter(this));
            painter->setClipRect(rect());
            painter->setRenderHints(QPainter::Antialiasing | QPainter::SmoothPixmapTransform);
            QPainterPtr *painter_ptr = &painter;
            reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<QPainterPtr*>::type)>(Slint_paintEvent)(rust_window, painter_ptr)

;
        }

        void resizeEvent(QResizeEvent *) override {
            if (!rust_window)
                return;

            // On windows, the size in the event is not reliable during
            // fullscreen changes. Querying the widget itself seems to work
            // better, see: https://stackoverflow.com/questions/52157587/why-qresizeevent-qwidgetsize-gives-different-when-fullscreen
            QSize size = this->size();
            reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<QSize>::type)>(Slint_resizeEvent)(rust_window, size)

;
        }

        void mousePressEvent(QMouseEvent *event) override {
            if (!rust_window)
                return;
            isMouseButtonDown = true;
            QPoint pos = event->pos();
            int button = event->button();
            reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<QPoint>::type, rustcpp::argument_helper<int>::type)>(Slint_mousePressEvent)(rust_window, pos, button)



;
        }
        void mouseReleaseEvent(QMouseEvent *event) override {
            if (!rust_window)
                return;
            // HACK: Qt on windows is a bit special when clicking on the window
            //       close button and when the resulting close event is ignored.
            //       In that case a release event that was not preceded by
            //       a press event is sent on Windows.
            //       This confuses Slint, so eat this event.
            //
            //       One example is a popup is shown in the close event that
            //       then ignores the the close request to ask the user what to
            //       do. The stray release event will then close the popup
            //       straight away
            if (!isMouseButtonDown) {
                return;
            }
            isMouseButtonDown = false;

            void *parent_of_popup_to_close = nullptr;
            if (auto p = dynamic_cast<const SlintWidget*>(parent())) {
                while (auto pp = dynamic_cast<const SlintWidget*>(p->parent())) {
                    p = pp;
                }
                void *parent_window = p->rust_window;
                bool inside = rect().contains(event->pos());
                bool close_on_click = std::move(*reinterpret_cast<bool*(*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<bool>::type, rustcpp::return_helper<bool>)>(Slint_mouseReleaseEventPopup)(parent_window, inside, 0))


;
                if (close_on_click) {
                    parent_of_popup_to_close = parent_window;
                }
            }

            QPoint pos = event->pos();
            int button = event->button();
            reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<QPoint>::type, rustcpp::argument_helper<int>::type)>(Slint_mouseReleaseEvent)(rust_window, pos, button)



;
            if (parent_of_popup_to_close) {
                reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type)>(Slint_mouseReleaseEventClosePopup)(parent_of_popup_to_close)

;
            }
        }
        void mouseMoveEvent(QMouseEvent *event) override {
            if (!rust_window)
                return;
            QPoint pos = event->pos();
            reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<QPoint>::type)>(Slint_mouseMoveEvent)(rust_window, pos)


;
        }
        void wheelEvent(QWheelEvent *event) override {
            if (!rust_window)
                return;
            QPointF pos = event->position();
            QPoint delta = event->pixelDelta();
            if (delta.isNull()) {
                delta = event->angleDelta();
            }
            reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<QPointF>::type, rustcpp::argument_helper<QPoint>::type)>(Slint_mouseWheelEvent)(rust_window, pos, delta)


;
        }
        void leaveEvent(QEvent *) override {
            if (!rust_window)
                return;
            reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type)>(Slint_mouseLeaveEvent)(rust_window)

;
        }

        void keyPressEvent(QKeyEvent *event) override {
            if (!rust_window)
                return;
            QString text =  event->text();
            int key = event->key();
            bool repeat = event->isAutoRepeat();
            reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<int>::type, rustcpp::argument_helper<QString>::type, rustcpp::argument_helper<bool>::type)>(Slint_keyPress)(rust_window, key, text, repeat)

;
        }
        void keyReleaseEvent(QKeyEvent *event) override {
            if (!rust_window)
                return;
            // Qt sends repeated releases together with presses for auto-repeat events, but Slint only sends presses in that case.
            // This matches the behavior of at least winit, Web and Android.
            if (event->isAutoRepeat())
                return;

            QString text =  event->text();
            int key = event->key();
            reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<int>::type, rustcpp::argument_helper<QString>::type)>(Slint_keyRelease)(rust_window, key, text)

;
        }

        void changeEvent(QEvent *event) override {
            if (!rust_window)
                return QWidget::changeEvent(event);

            if (event->type() == QEvent::ActivationChange) {
                bool active = isActiveWindow();
                reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<bool>::type)>(Slint_updateWindowActivation)(rust_window, active)

;
            } else if (event->type() == QEvent::PaletteChange || event->type() == QEvent::StyleChange) {
                bool dark_color_scheme = qApp->palette().color(QPalette::Window).valueF() < 0.5;
                reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<bool>::type)>(Slint_updateWindowDarkColorScheme)(rust_window, dark_color_scheme)







;
            }

            // Entering fullscreen, maximizing or minimizing the window will
            // trigger a change event. We need to update the internal window
            // state to match the actual window state.
            if (event->type() == QEvent::WindowStateChange)
            {
                reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type)>(Slint_syncWindowState)(rust_window)

;
            }


            QWidget::changeEvent(event);
        }

        void closeEvent(QCloseEvent *event) override {
            if (!rust_window)
                return;
            reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type)>(Slint_requestClose)(rust_window)

;
            event->ignore();
        }

        QSize sizeHint() const override {
            if (!rust_window)
                return {};
            auto preferred_size = std::move(*reinterpret_cast<QSize*(*)(rustcpp::argument_helper<void*>::type, rustcpp::return_helper<QSize>)>(Slint_sizeHint)(rust_window, 0))








;
            if (!preferred_size.isEmpty()) {
                return preferred_size;
            } else {
                return QWidget::sizeHint();
            }
        }

        QVariant inputMethodQuery(Qt::InputMethodQuery query) const override {
            switch (query) {
            case Qt::ImCursorRectangle: return ime_position;
            case Qt::ImCursorPosition: return ime_cursor;
            case Qt::ImSurroundingText: return ime_text;
            case Qt::ImCurrentSelection: return ime_text.mid(qMin(ime_cursor, ime_anchor), qAbs(ime_cursor - ime_anchor));
            case Qt::ImAnchorPosition: return ime_anchor;
            case Qt::ImTextBeforeCursor: return ime_text.left(ime_cursor);
            case Qt::ImTextAfterCursor: return ime_text.right(ime_cursor);
            default: break;
            }
            return QWidget::inputMethodQuery(query);
        }

        void inputMethodEvent(QInputMethodEvent *event) override {
            if (!rust_window)
                return;
            QString commit_string = event->commitString();
            QString preedit_string = event->preeditString();
            int replacement_start = event->replacementStart();
            QStringView ime_text(this->ime_text);
            replacement_start = replacement_start < 0 ?
                -ime_text.mid(ime_cursor,-replacement_start).toUtf8().size() :
                ime_text.mid(ime_cursor,replacement_start).toUtf8().size();
            int replacement_length = qMax(0, event->replacementLength());
            ime_text.mid(ime_cursor + replacement_start, replacement_length).toUtf8().size();
            int preedit_cursor = -1;
            for (const QInputMethodEvent::Attribute &attribute: event->attributes()) {
                if (attribute.type == QInputMethodEvent::Cursor) {
                    if (attribute.length > 0) {
                        preedit_cursor = QStringView(preedit_string).left(attribute.start).toUtf8().size();
                    }
                }
            }
            event->accept();
            reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type, rustcpp::argument_helper<QString>::type, rustcpp::argument_helper<QString>::type, rustcpp::argument_helper<int>::type, rustcpp::argument_helper<int>::type, rustcpp::argument_helper<int>::type)>(Slint_inputMethodEvent)(rust_window, commit_string, preedit_string, replacement_start, replacement_length, preedit_cursor)













;
        }
    };

    // Helper function used for the TextInput layouting
    //
    // if line_for_y_pos > 0, then the function will return the line at this y position
    static int do_text_layout(QTextLayout &layout, int flags, const QRectF &rect, int line_for_y_pos = -1) {
        QTextOption options;
        options.setWrapMode((flags & Qt::TextWordWrap) ? QTextOption::WordWrap : ((flags & Qt::TextWrapAnywhere) ? QTextOption::WrapAnywhere : QTextOption::NoWrap));
        if (flags & Qt::AlignHCenter)
            options.setAlignment(Qt::AlignCenter);
        else if (flags & Qt::AlignLeft)
            options.setAlignment(Qt::AlignLeft);
        else if (flags & Qt::AlignRight)
            options.setAlignment(Qt::AlignRight);
        options.setFlags(QTextOption::IncludeTrailingSpaces);
        layout.setTextOption(options);
        layout.setCacheEnabled(true);
        QFontMetrics fm(layout.font());
        int leading = fm.leading();
        qreal height = 0;
        layout.beginLayout();
        int count = 0;
        while(1) {
            auto line = layout.createLine();
            if (!line.isValid())
                break;
            line.setLineWidth(rect.width());
            height += leading;
            line.setPosition(QPointF(0, height));
            height += line.height();
            if (line_for_y_pos >= 0 && height > line_for_y_pos) {
                return count;
            }
            count++;
        }
        layout.endLayout();
        if (flags & Qt::AlignVCenter) {
            layout.setPosition(QPointF(0, (rect.height() - height) / 2.));
        } else if (flags & Qt::AlignBottom) {
            layout.setPosition(QPointF(0, rect.height() - height));
        }
        return -1;
    }

    QPainterPath to_painter_path(const QRectF &rect, qreal top_left_radius, qreal top_right_radius, qreal bottom_right_radius, qreal bottom_left_radius) {
        QPainterPath path;
        if (qFuzzyCompare(top_left_radius, top_right_radius) && qFuzzyCompare(top_left_radius, bottom_right_radius) && qFuzzyCompare(top_left_radius, bottom_left_radius)) {
            path.addRoundedRect(rect, top_left_radius, top_left_radius);
        } else {
            QSizeF half = rect.size() / 2.0;

            qreal tl_rx = qMin(top_left_radius, half.width());
            qreal tl_ry = qMin(top_left_radius, half.height());
            QRectF top_left(rect.left(), rect.top(), 2 * tl_rx, 2 * tl_ry);

            qreal tr_rx = qMin(top_right_radius, half.width());
            qreal tr_ry = qMin(top_right_radius, half.height());
            QRectF top_right(rect.right() - 2 * tr_rx, rect.top(), 2 * tr_rx, 2 * tr_ry);

            qreal br_rx = qMin(bottom_right_radius, half.width());
            qreal br_ry = qMin(bottom_right_radius, half.height());
            QRectF bottom_right(rect.right() - 2 * br_rx, rect.bottom() - 2 * br_ry, 2 * br_rx, 2 * br_ry);

            qreal bl_rx = qMin(bottom_left_radius, half.width());
            qreal bl_ry = qMin(bottom_left_radius, half.height());
            QRectF bottom_left(rect.left(), rect.bottom() - 2 * bl_ry, 2 * bl_rx, 2 * bl_ry);

            if (top_left.isNull()) {
                path.moveTo(rect.topLeft());
            } else {
                path.arcMoveTo(top_left, 180);
                path.arcTo(top_left, 180, -90);
            }
            if (top_right.isNull()) {
                path.lineTo(rect.topRight());
            } else {
                path.arcTo(top_right, 90, -90);
            }
            if (bottom_right.isNull()) {
                path.lineTo(rect.bottomRight());
            } else {
                path.arcTo(bottom_right, 0, -90);
            }
            if (bottom_left.isNull()) {
                path.lineTo(rect.bottomLeft());
            } else {
                path.arcTo(bottom_left, -90, -90);
            }
            path.closeSubpath();
        }
        return path;
    };

#line 1605 "qt_window.rs"
       
    struct QWidgetDeleteLater
    {
        void operator()(QWidget *widget_ptr)
        {
            widget_ptr->hide();
            widget_ptr->deleteLater();
        }
    };


#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_13660798664382024109() {
#line 139 "lib.rs"
                            
                ensure_initialized(true);
            
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_10237296277533982771() {
#line 165 "lib.rs"
                             
                ensure_initialized(true);
                qApp->exec();
            
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline bool __cpp_closure_3096938983811971374_impl(int const& timeout_ms) {
#line 186 "lib.rs"
                                                                                      
                ensure_initialized(true);
                qApp->processEvents(QEventLoop::AllEvents, timeout_ms);
                return std::exchange(g_lastWindowClosed, false);
            
}
extern "C" {
void __cpp_closure_3096938983811971374(int const& timeout_ms, void* __result) {
    ::new(__result) (bool)(__cpp_closure_3096938983811971374_impl(timeout_ms));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_17335763750398892063() {
#line 207 "lib.rs"
                                 
                    // Use a quit event to avoid qApp->quit() calling
                    // [NSApp terminate:nil] and us never returning from the
                    // event loop - slint-viewer relies on the ability to
                    // return from run().
                    QCoreApplication::postEvent(qApp, new QEvent(QEvent::Quit));
                
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_15034730818811667015(TraitObject const& fnbox) {
#line 252 "lib.rs"
                                                       
                    QTimer::singleShot(0, qApp, EventHolder{fnbox});
                
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_274099984103762149(QString const& text, bool const& is_selection) {
#line 270 "lib.rs"
                                                                  
            ensure_initialized();
            if (is_selection && !QGuiApplication::clipboard()->supportsSelection())
                return;
            QGuiApplication::clipboard()->setText(text, is_selection ? QClipboard::Selection : QClipboard::Clipboard);
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline bool __cpp_closure_6735153420083102814_impl(bool const& is_selection) {
#line 286 "lib.rs"
                                                                                
            ensure_initialized();
            if (is_selection && !QGuiApplication::clipboard()->supportsSelection())
                return false;
            return QGuiApplication::clipboard()->mimeData(is_selection ? QClipboard::Selection : QClipboard::Clipboard)->hasText();
        
}
extern "C" {
void __cpp_closure_6735153420083102814(bool const& is_selection, void* __result) {
    ::new(__result) (bool)(__cpp_closure_6735153420083102814_impl(is_selection));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QString __cpp_closure_9200663706693917720_impl(bool const& is_selection) {
#line 294 "lib.rs"
                                                                                         
                    return QGuiApplication::clipboard()->text(is_selection ? QClipboard::Selection : QClipboard::Clipboard);
                
}
extern "C" {
void __cpp_closure_9200663706693917720(bool const& is_selection, void* __result) {
    ::new(__result) (QString)(__cpp_closure_9200663706693917720_impl(is_selection));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline int __cpp_closure_3625001161774533009_impl() {
#line 306 "lib.rs"
                                            return qApp->doubleClickInterval(); 
}
extern "C" {
void __cpp_closure_3625001161774533009( void* __result) {
    ::new(__result) (int)(__cpp_closure_3625001161774533009_impl());
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_7316213611084365413(QObject* const& obj) {
#line 41 "qt_accessible.rs"
                                         
            QTimer::singleShot(0, [obj = QPointer(obj)]() {
                if (!obj)
                    return;

                auto accessible_item = static_cast<Slint_accessible_item*>(QAccessible::queryAccessibleInterface(obj));
                auto data = accessible_item->data();
                reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type)>(rust_cpp_callbacks17476396009874180260[0])(data)

;

                QAccessible::State s = {};
                s.checked = true; // Mark checked as changed!
                auto event = QAccessibleStateChangeEvent(obj, s);
                QAccessible::updateAccessibility(&event);
            });
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_16207431697476881391(QObject* const& obj) {
#line 68 "qt_accessible.rs"
                                         
            QTimer::singleShot(0, [ obj = QPointer(obj)]() {
                if (!obj)
                    return;

                auto accessible_item = static_cast<Slint_accessible_item*>(QAccessible::queryAccessibleInterface(obj));
                auto data = accessible_item->data();
                reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type)>(rust_cpp_callbacks17476396009874180260[1])(data)

;

                auto event = QAccessibleValueChangeEvent(obj, accessible_item->currentValue());
                QAccessible::updateAccessibility(&event);
            });
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_1529574746773345989(QObject* const& obj) {
#line 93 "qt_accessible.rs"
                                         
            QTimer::singleShot(0, [obj = QPointer(obj)]() {
                if (!obj)
                    return;

                auto accessible_item = static_cast<Slint_accessible_item*>(QAccessible::queryAccessibleInterface(obj));
                auto data = accessible_item->data();
                reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type)>(rust_cpp_callbacks17476396009874180260[2])(data)

;

                auto event = QAccessibleEvent(obj, QAccessible::NameChanged);
                QAccessible::updateAccessibility(&event);
            });
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_4149722869045358259(QObject* const& obj) {
#line 118 "qt_accessible.rs"
                                         
            QTimer::singleShot(0, [obj = QPointer(obj)]() {
                if (!obj)
                    return;

                auto accessible_item = static_cast<Slint_accessible_item*>(QAccessible::queryAccessibleInterface(obj));
                auto data = accessible_item->data();
                reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type)>(rust_cpp_callbacks17476396009874180260[3])(data)

;

                auto event = QAccessibleEvent(obj, QAccessible::DescriptionChanged);
                QAccessible::updateAccessibility(&event);
            });
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_686368431444686277(QObject* const& obj) {
#line 143 "qt_accessible.rs"
                                         
            QTimer::singleShot(0, [obj = QPointer(obj)]() {
                if (!obj)
                    return;

                auto accessible_item = static_cast<Slint_accessible_item*>(QAccessible::queryAccessibleInterface(obj));
                auto data = accessible_item->data();
                reinterpret_cast<void (*)(rustcpp::argument_helper<void*>::type)>(rust_cpp_callbacks17476396009874180260[4])(data)

;

                accessible_item->delegateFocus();
            });
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline int __cpp_closure_12186555131501271858_impl(bool const& active) {
#line 67 "qt_widgets.rs"
                                                                                   
                QStyle::State state(QStyle::State_None);
                if (active)
                    state |= QStyle::State_Active;
                return (int)state;
            
}
extern "C" {
void __cpp_closure_12186555131501271858(bool const& active, void* __result) {
    ::new(__result) (int)(__cpp_closure_12186555131501271858_impl(active));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline std::unique_ptr<QPainter> __cpp_closure_6192503056678899645_impl(QImage* const& img) {
#line 103 "qt_widgets.rs"
                                                                                                                        
                            auto painter = std::make_unique<QPainter>(img);
                            painter->setRenderHints(QPainter::Antialiasing | QPainter::SmoothPixmapTransform);
                            return painter;
                        
}
extern "C" {
void __cpp_closure_6192503056678899645(QImage* const& img, void* __result) {
    ::new(__result) (std::unique_ptr<QPainter>)(__cpp_closure_6192503056678899645_impl(img));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QImage __cpp_closure_6096198544540142962_impl(QSize const& size, uchar* const& array_ptr, float const& dpr) {
#line 132 "qt_widgets.rs"
                                                                                                                       
            ensure_initialized();
            QImage img(array_ptr, size.width(), size.height(), size.width() * 4, QImage::Format_RGBA8888_Premultiplied);
            img.setDevicePixelRatio(dpr);
            return img;
        
}
extern "C" {
void __cpp_closure_6096198544540142962(QSize const& size, uchar* const& array_ptr, float const& dpr, void* __result) {
    ::new(__result) (QImage)(__cpp_closure_6096198544540142962_impl(size, array_ptr, dpr));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline void* __cpp_closure_4315255974229101515_impl(std::unique_ptr<SlintTypeErasedWidget>* const& widget_ptr) {
#line 243 "qt_widgets.rs"
                                                                                                         
            return (*widget_ptr)->qwidget();
        
}
extern "C" {
void __cpp_closure_4315255974229101515(std::unique_ptr<SlintTypeErasedWidget>* const& widget_ptr, void* __result) {
    ::new(__result) (void*)(__cpp_closure_4315255974229101515_impl(widget_ptr));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline PainterClipWorkaround __cpp_closure_8139012612836076910_impl(const QPainterPtr* const& painter) {
#line 283 "qt_widgets.rs"
                                                                                                           
            return PainterClipWorkaround(painter->get());
        
}
extern "C" {
void __cpp_closure_8139012612836076910(const QPainterPtr* const& painter, void* __result) {
    ::new(__result) (PainterClipWorkaround)(__cpp_closure_8139012612836076910_impl(painter));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QPixmap __cpp_closure_16606810250010842990_impl(QStyle::StandardPixmap const& style_icon, QWidget* const& widget_ptr) {
#line 174 "qt_widgets/button.rs"
                                                                                                                         
            ensure_initialized();
            auto style = qApp->style();
            if (!style->styleHint(QStyle::SH_DialogButtonBox_ButtonsHaveIcons, nullptr, widget_ptr))
                return QPixmap();
            return style->standardPixmap(style_icon);
        
}
extern "C" {
void __cpp_closure_16606810250010842990(QStyle::StandardPixmap const& style_icon, QWidget* const& widget_ptr, void* __result) {
    ::new(__result) (QPixmap)(__cpp_closure_16606810250010842990_impl(style_icon, widget_ptr));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline std::unique_ptr<SlintTypeErasedWidget> __cpp_closure_358552825561738260_impl(void* const& animation_tracker_property_ptr) {
#line 196 "qt_widgets/button.rs"
                                                                                                                                                               
            return make_unique_animated_widget<QPushButton>(animation_tracker_property_ptr);
        
}
extern "C" {
void __cpp_closure_358552825561738260(void* const& animation_tracker_property_ptr, void* __result) {
    ::new(__result) (std::unique_ptr<SlintTypeErasedWidget>)(__cpp_closure_358552825561738260_impl(animation_tracker_property_ptr));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QSize __cpp_closure_3711893757478371062_impl(QString & text, QPixmap const& icon, QWidget* const& widget_ptr) {
#line 214 "qt_widgets/button.rs"
                                        
            ensure_initialized();
            QStyleOptionButton option;
            if (text.isEmpty())
                text = "**";
            option.rect = option.fontMetrics.boundingRect(text);
            option.text = std::move(text);
            option.icon = icon;
            auto iconSize = qApp->style()->pixelMetric(QStyle::PM_ButtonIconSize, 0, widget_ptr);
            option.iconSize = QSize(iconSize, iconSize);
            if (!icon.isNull()) {
                option.rect.setHeight(qMax(option.rect.height(), iconSize));
                option.rect.setWidth(option.rect.width() + 4 + iconSize);
            }
            return qApp->style()->sizeFromContents(QStyle::CT_PushButton, &option, option.rect.size(), widget_ptr);
        
}
extern "C" {
void __cpp_closure_3711893757478371062(QString & text, QPixmap const& icon, QWidget* const& widget_ptr, void* __result) {
    ::new(__result) (QSize)(__cpp_closure_3711893757478371062_impl(text, icon, widget_ptr));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_14843504169015304306(QPainterPtr* const& painter, QWidget* const& widget, QString const& text, QPixmap const& icon, bool const& enabled, QSize const& size, bool const& down, bool const& checked, bool const& has_focus, bool const& has_hover, bool const& primary, bool const& colorize_icon, float const& dpr, int const& initial_state) {
#line 354 "qt_widgets/button.rs"
           
            class ColorizedIconEngine : public QIconEngine
            {
            public:
                ColorizedIconEngine(const QIcon &icon, const QColor &color) : m_icon(icon), m_color(color) { }

                QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state) override
                {
                    QPixmap iconPixmap = m_icon.pixmap(size, mode, state);
                    if (!iconPixmap.isNull()) {
                        QPainter colorizePainter(&iconPixmap);
                        colorizePainter.setCompositionMode(QPainter::CompositionMode_SourceIn);
                        colorizePainter.fillRect(iconPixmap.rect(), m_color);
                    }
                    return iconPixmap;
                }

                void paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state) override
                {
                    painter->drawPixmap(rect, this->pixmap(rect.size(), mode, state));
                }

                QIconEngine *clone() const override { return new ColorizedIconEngine(m_icon, m_color); }

            private:
                QIcon m_icon;
                QColor m_color;
            };

            QStyleOptionButton option;
            option.styleObject = widget;
            option.state |= QStyle::State(initial_state);
            option.text = std::move(text);

            QColor iconColor = qApp->palette().color(QPalette::ButtonText).rgba();

            if (down) {
                option.state |= QStyle::State_Sunken;
            } else {
                option.state |= QStyle::State_Raised;
            }
            if (checked) {
                option.state |= QStyle::State_On;
            }
            if (enabled) {
                option.state |= QStyle::State_Enabled;
            } else {
                option.palette.setCurrentColorGroup(QPalette::Disabled);
                iconColor = qApp->palette().color(QPalette::Disabled, QPalette::ButtonText).rgba();
            }
            if (has_focus) {
                option.state |= QStyle::State_HasFocus | QStyle::State_KeyboardFocusChange | QStyle::State_Item;
            }
            if (has_hover) {
                option.state |= QStyle::State_MouseOver;
            }
            if (primary) {
                option.features |= QStyleOptionButton::DefaultButton;
            }
            if (colorize_icon) {
                option.icon = QIcon(new ColorizedIconEngine(icon, iconColor));
            } else {
                option.icon = icon;
            }
            auto iconSize = qApp->style()->pixelMetric(QStyle::PM_ButtonIconSize, 0, nullptr);
            option.iconSize = QSize(iconSize, iconSize);
            option.rect = QRect(QPoint(), size / dpr);

            qApp->style()->drawControl(QStyle::CE_PushButton, &option, painter->get(), widget);
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline std::unique_ptr<SlintTypeErasedWidget> __cpp_closure_18186952347232860371_impl(void* const& animation_tracker_property_ptr) {
#line 29 "qt_widgets/checkbox.rs"
                                                                                                                                                                
            return make_unique_animated_widget<QCheckBox>(animation_tracker_property_ptr);
        
}
extern "C" {
void __cpp_closure_18186952347232860371(void* const& animation_tracker_property_ptr, void* __result) {
    ::new(__result) (std::unique_ptr<SlintTypeErasedWidget>)(__cpp_closure_18186952347232860371_impl(animation_tracker_property_ptr));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QSize __cpp_closure_15339094767538042650_impl(QString const& text, QWidget* const& widget) {
#line 44 "qt_widgets/checkbox.rs"
                                        
            ensure_initialized();
            QStyleOptionButton option;
            option.rect = option.fontMetrics.boundingRect(text);
            option.text = std::move(text);
            return qApp->style()->sizeFromContents(QStyle::CT_CheckBox, &option, option.rect.size(), widget);
        
}
extern "C" {
void __cpp_closure_15339094767538042650(QString const& text, QWidget* const& widget, void* __result) {
    ::new(__result) (QSize)(__cpp_closure_15339094767538042650_impl(text, widget));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_6073782150258495012(QPainterPtr* const& painter, QWidget* const& widget, bool const& enabled, QString const& text, QSize const& size, bool const& checked, bool const& has_focus, bool const& has_hover, float const& dpr, int const& initial_state) {
#line 156 "qt_widgets/checkbox.rs"
           
            QStyleOptionButton option;
            option.styleObject = widget;
            option.state |= QStyle::State(initial_state);
            option.text = std::move(text);
            option.rect = QRect(QPoint(), size / dpr);
            option.state |= checked ? QStyle::State_On : QStyle::State_Off;
            if (enabled) {
                option.state |= QStyle::State_Enabled;
            } else {
                option.palette.setCurrentColorGroup(QPalette::Disabled);
            }
            if (has_focus) {
                option.state |= QStyle::State_HasFocus | QStyle::State_KeyboardFocusChange | QStyle::State_Item;
            }
            if (has_hover) {
                option.state |= QStyle::State_MouseOver;
            }
            qApp->style()->drawControl(QStyle::CE_CheckBox, &option, painter->get(), widget);
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline std::unique_ptr<SlintTypeErasedWidget> __cpp_closure_11963895434059072372_impl(void* const& animation_tracker_property_ptr) {
#line 67 "qt_widgets/spinbox.rs"
                                                                                                                                                               
            return make_unique_animated_widget<QSpinBox>(animation_tracker_property_ptr);
        
}
extern "C" {
void __cpp_closure_11963895434059072372(void* const& animation_tracker_property_ptr, void* __result) {
    ::new(__result) (std::unique_ptr<SlintTypeErasedWidget>)(__cpp_closure_11963895434059072372_impl(animation_tracker_property_ptr));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QSize __cpp_closure_10722652064409612584_impl(int const& active_controls, bool const& pressed, bool const& enabled, QWidget* const& widget) {
#line 90 "qt_widgets/spinbox.rs"
                                        
            ensure_initialized();
            auto style = qApp->style();

            QStyleOptionSpinBox option;
            initQSpinBoxOptions(option, pressed, enabled, active_controls);

            QStyleOptionFrame frame;
            frame.state = option.state;
            frame.lineWidth = style->styleHint(QStyle::SH_SpinBox_ButtonsInsideFrame, &option, nullptr) ? 0
                : style->pixelMetric(QStyle::PM_DefaultFrameWidth, &option, nullptr);
            frame.midLineWidth = 0;
            auto content = option.fontMetrics.boundingRect("0000");
            const QSize margins(2 * 2, 2 * 1); // QLineEditPrivate::verticalMargin and QLineEditPrivate::horizontalMargin
            auto line_edit_size = style->sizeFromContents(QStyle::CT_LineEdit, &frame, content.size() + margins, widget);
            return style->sizeFromContents(QStyle::CT_SpinBox, &option, line_edit_size, widget);
        
}
extern "C" {
void __cpp_closure_10722652064409612584(int const& active_controls, bool const& pressed, bool const& enabled, QWidget* const& widget, void* __result) {
    ::new(__result) (QSize)(__cpp_closure_10722652064409612584_impl(active_controls, pressed, enabled, widget));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline int __cpp_closure_17522428396251933491_impl(QPoint const& pos, QSize const& size, bool const& enabled, int const& active_controls, bool const& pressed, QWidget* const& widget) {
#line 158 "qt_widgets/spinbox.rs"
                           
            ensure_initialized();
            auto style = qApp->style();

            QStyleOptionSpinBox option;
            option.rect = { QPoint{}, size };
            initQSpinBoxOptions(option, pressed, enabled, active_controls);

            return style->hitTestComplexControl(QStyle::CC_SpinBox, &option, pos, widget);
        
}
extern "C" {
void __cpp_closure_17522428396251933491(QPoint const& pos, QSize const& size, bool const& enabled, int const& active_controls, bool const& pressed, QWidget* const& widget, void* __result) {
    ::new(__result) (int)(__cpp_closure_17522428396251933491_impl(pos, size, enabled, active_controls, pressed, widget));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline int __cpp_closure_2801373047854216747_impl() {
#line 181 "qt_widgets/spinbox.rs"
                                                                     return QStyle::SC_SpinBoxUp;
}
extern "C" {
void __cpp_closure_2801373047854216747( void* __result) {
    ::new(__result) (int)(__cpp_closure_2801373047854216747_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline int __cpp_closure_5938390886433030019_impl() {
#line 193 "qt_widgets/spinbox.rs"
                                                          return QStyle::SC_SpinBoxDown;
}
extern "C" {
void __cpp_closure_5938390886433030019( void* __result) {
    ::new(__result) (int)(__cpp_closure_5938390886433030019_impl());
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_1750780715751966469(QPainterPtr* const& painter, QWidget* const& widget, int const& value, bool const& enabled, bool const& has_focus, QSize const& size, int const& active_controls, bool const& pressed, float const& dpr, int const& initial_state, int const& horizontal_alignment) {
#line 314 "qt_widgets/spinbox.rs"
           
            auto style = qApp->style();
            QStyleOptionSpinBox option;
            option.styleObject = widget;
            option.state |= QStyle::State(initial_state);
            if (enabled && has_focus) {
                option.state |= QStyle::State_HasFocus;
            }
            option.rect = QRect(QPoint(), size / dpr);
            initQSpinBoxOptions(option, pressed, enabled, active_controls);
            style->drawComplexControl(QStyle::CC_SpinBox, &option, painter->get(), widget);

            static_cast<QAbstractSpinBox*>(widget)->setAlignment(Qt::AlignRight);
            QStyleOptionFrame frame;
            frame.state = option.state;
            frame.palette = option.palette;
            frame.lineWidth = style->styleHint(QStyle::SH_SpinBox_ButtonsInsideFrame, &option, widget) ? 0
                : style->pixelMetric(QStyle::PM_DefaultFrameWidth, &option, widget);
            frame.midLineWidth = 0;
            frame.rect = style->subControlRect(QStyle::CC_SpinBox, &option, QStyle::SC_SpinBoxEditField, widget);
            style->drawPrimitive(QStyle::PE_PanelLineEdit, &frame, painter->get(), widget);
            QRect text_rect = qApp->style()->subElementRect(QStyle::SE_LineEditContents, &frame, widget);
            text_rect.adjust(1, 2, 1, 2);
            (*painter)->setPen(option.palette.color(QPalette::Text));
            (*painter)->drawText(text_rect, QString::number(value), QTextOption(static_cast<Qt::AlignmentFlag>(horizontal_alignment)));
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline std::unique_ptr<SlintTypeErasedWidget> __cpp_closure_4749406847778199920_impl(void* const& animation_tracker_property_ptr) {
#line 72 "qt_widgets/slider.rs"
                                                                                                                                                               
            return make_unique_animated_widget<QSlider>(animation_tracker_property_ptr);
        
}
extern "C" {
void __cpp_closure_4749406847778199920(void* const& animation_tracker_property_ptr, void* __result) {
    ::new(__result) (std::unique_ptr<SlintTypeErasedWidget>)(__cpp_closure_4749406847778199920_impl(animation_tracker_property_ptr));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QSize __cpp_closure_13282999944449134685_impl(bool const& enabled, int const& value, int const& min, int const& max, int const& active_controls, bool const& pressed, bool const& vertical, QWidget* const& widget) {
#line 103 "qt_widgets/slider.rs"
                                        
            ensure_initialized();
            QStyleOptionSlider option;
            initQSliderOptions(option, pressed, enabled, active_controls, min, max, value, vertical);
            auto style = qApp->style();
            auto thick = style->pixelMetric(QStyle::PM_SliderThickness, &option, widget);
            return style->sizeFromContents(QStyle::CT_Slider, &option, QSize(0, thick), widget);
        
}
extern "C" {
void __cpp_closure_13282999944449134685(bool const& enabled, int const& value, int const& min, int const& max, int const& active_controls, bool const& pressed, bool const& vertical, QWidget* const& widget, void* __result) {
    ::new(__result) (QSize)(__cpp_closure_13282999944449134685_impl(enabled, value, min, max, active_controls, pressed, vertical, widget));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline int __cpp_closure_2562186376167245879_impl(QPoint const& pos, QSize const& size, bool const& enabled, int const& value, int const& min, int const& max, int const& active_controls, bool const& pressed, bool const& vertical, QWidget* const& widget) {
#line 194 "qt_widgets/slider.rs"
                           
            ensure_initialized();
            QStyleOptionSlider option;
            initQSliderOptions(option, pressed, enabled, active_controls, min, max, value, vertical);
            auto style = qApp->style();
            option.rect = { QPoint{}, size };
            return style->hitTestComplexControl(QStyle::CC_Slider, &option, pos, widget);
        
}
extern "C" {
void __cpp_closure_2562186376167245879(QPoint const& pos, QSize const& size, bool const& enabled, int const& value, int const& min, int const& max, int const& active_controls, bool const& pressed, bool const& vertical, QWidget* const& widget, void* __result) {
    ::new(__result) (int)(__cpp_closure_2562186376167245879_impl(pos, size, enabled, value, min, max, active_controls, pressed, vertical, widget));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_4010681789533541199(QPainterPtr* const& painter, QWidget* const& widget, bool const& enabled, bool const& has_focus, int const& value, int const& min, int const& max, QSize const& size, int const& active_controls, bool const& pressed, bool const& vertical, float const& dpr, int const& initial_state) {
#line 337 "qt_widgets/slider.rs"
           
            QStyleOptionSlider option;
            option.styleObject = widget;
            option.state |= QStyle::State(initial_state);
            if (has_focus) {
                option.state |= QStyle::State_HasFocus | QStyle::State_KeyboardFocusChange | QStyle::State_Item;
            }
            option.rect = QRect(QPoint(), size / dpr);
            initQSliderOptions(option, pressed, enabled, active_controls, min, max, value, vertical);
            auto style = qApp->style();
            style->drawComplexControl(QStyle::CC_Slider, &option, painter->get(), widget);
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline std::unique_ptr<SlintTypeErasedWidget> __cpp_closure_4986632113096374611_impl(void* const& animation_tracker_property_ptr) {
#line 23 "qt_widgets/progress_indicator.rs"
                                                                                                                                                
                return make_unique_animated_widget<QProgressBar>(animation_tracker_property_ptr);
            
}
extern "C" {
void __cpp_closure_4986632113096374611(void* const& animation_tracker_property_ptr, void* __result) {
    ::new(__result) (std::unique_ptr<SlintTypeErasedWidget>)(__cpp_closure_4986632113096374611_impl(animation_tracker_property_ptr));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QSize __cpp_closure_13057911347941358840_impl(int const& progress, QWidget* const& widget) {
#line 42 "qt_widgets/progress_indicator.rs"
                                        
            ensure_initialized();
            QStyleOptionProgressBar option;
            option.maximum = 100;
            option.minimum = 0;
            option.progress = progress;
            option.textVisible = false;
            option.state |= QStyle::State_Horizontal;

            int chunkWidth = qApp->style()->pixelMetric(QStyle::PM_ProgressBarChunkWidth, &option, widget);
            auto size = QSize(chunkWidth * 10, option.fontMetrics.height() + 10);
            return qApp->style()->sizeFromContents(QStyle::CT_ProgressBar, &option, size, widget);
        
}
extern "C" {
void __cpp_closure_13057911347941358840(int const& progress, QWidget* const& widget, void* __result) {
    ::new(__result) (QSize)(__cpp_closure_13057911347941358840_impl(progress, widget));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_8761041358880682527(QPainterPtr* const& painter, QWidget* const& widget, QSize const& size, int const& progress, float const& dpr, int const& initial_state) {
#line 119 "qt_widgets/progress_indicator.rs"
           
            QPainter *painter_ = painter->get();
            QStyleOptionProgressBar option;
            option.styleObject = widget;
            option.state |= QStyle::State(initial_state) | QStyle::State_Horizontal |  QStyle::State_Enabled;
            option.rect = QRect(QPoint(), size / dpr);
            option.maximum = progress < 0 ? 0 : 100;
            option.minimum = 0;
            option.progress = progress;

            qApp->style()->drawControl(QStyle::CE_ProgressBar, &option, painter_, widget);
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QSize __cpp_closure_10973510286653386267_impl(QString const& title) {
#line 49 "qt_widgets/groupbox.rs"
                                                                   
        ensure_initialized();

        QStyleOptionGroupBox option = create_group_box_option(title);

        QFontMetrics metrics = option.fontMetrics;
        int baseWidth = metrics.horizontalAdvance(title) + metrics.horizontalAdvance(QLatin1Char(' '));
        int baseHeight = metrics.height();

        return qApp->style()->sizeFromContents(QStyle::CT_GroupBox, &option, QSize(baseWidth, baseHeight), nullptr);
    
}
extern "C" {
void __cpp_closure_10973510286653386267(QString const& title, void* __result) {
    ::new(__result) (QSize)(__cpp_closure_10973510286653386267_impl(title));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline std::unique_ptr<SlintTypeErasedWidget> __cpp_closure_15963318591300117537_impl(void* const& animation_tracker_property_ptr) {
#line 65 "qt_widgets/groupbox.rs"
                                                                                                                                                                
            return make_unique_animated_widget<QGroupBox>(animation_tracker_property_ptr);
        
}
extern "C" {
void __cpp_closure_15963318591300117537(void* const& animation_tracker_property_ptr, void* __result) {
    ::new(__result) (std::unique_ptr<SlintTypeErasedWidget>)(__cpp_closure_15963318591300117537_impl(animation_tracker_property_ptr));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QMargins __cpp_closure_2436717643017272063_impl(QString const& text) {
#line 85 "qt_widgets/groupbox.rs"
                                                      
                    ensure_initialized();
                    QStyleOptionGroupBox option = create_group_box_option(text);

                    // Just some size big enough to be sure that the frame fits in it
                    option.rect = QRect(0, 0, 10000, 10000);
                    QRect contentsRect = qApp->style()->subControlRect(
                        QStyle::CC_GroupBox, &option, QStyle::SC_GroupBoxContents);
                    //QRect elementRect = qApp->style()->subElementRect(
                    //    QStyle::SE_GroupBoxLayoutItem, &option);

                    auto hs = qApp->style()->pixelMetric(QStyle::PM_LayoutHorizontalSpacing, &option);
                    auto vs = qApp->style()->pixelMetric(QStyle::PM_LayoutVerticalSpacing, &option);

                    return {
                        (contentsRect.left() + hs),
                        (contentsRect.top() + vs),
                        (option.rect.right() - contentsRect.right() + hs),
                        (option.rect.bottom() - contentsRect.bottom() + vs)
                    };
                
}
extern "C" {
void __cpp_closure_2436717643017272063(QString const& text, void* __result) {
    ::new(__result) (QMargins)(__cpp_closure_2436717643017272063_impl(text));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_12135192898540604015(QPainterPtr* const& painter, QWidget* const& widget, QString const& text, bool const& enabled, QSize const& size, float const& dpr, int const& initial_state) {
#line 210 "qt_widgets/groupbox.rs"
           
            if (auto groupbox = qobject_cast<QGroupBox *>(widget)) {
                // If not set, the style may render incorrectly
                // https://github.com/qt/qtbase/blob/5be45ff6a6e157d45b0010a4f09d3a11e62fddce/src/widgets/styles/qfusionstyle.cpp#L441
                groupbox->setTitle(text);
            }
            QStyleOptionGroupBox option;
            option.styleObject = widget;
            option.state |= QStyle::State(initial_state);
            if (enabled) {
                option.state |= QStyle::State_Enabled;
            } else {
                option.palette.setCurrentColorGroup(QPalette::Disabled);
            }
            option.rect = QRect(QPoint(), size / dpr);
            option.text = text;
            option.lineWidth = 1;
            option.midLineWidth = 0;
            option.subControls = QStyle::SC_GroupBoxFrame;
            if (!text.isEmpty()) {
                option.subControls |= QStyle::SC_GroupBoxLabel;
            }
            option.textColor = QColor(qApp->style()->styleHint(
                QStyle::SH_GroupBox_TextLabelColor, &option));
            qApp->style()->drawComplexControl(QStyle::CC_GroupBox, &option, painter->get(), widget);
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline std::unique_ptr<SlintTypeErasedWidget> __cpp_closure_5340870668741211730_impl(void* const& animation_tracker_property_ptr) {
#line 28 "qt_widgets/lineedit.rs"
                                                                                                                                                                
            return make_unique_animated_widget<QLineEdit>(animation_tracker_property_ptr);
        
}
extern "C" {
void __cpp_closure_5340870668741211730(void* const& animation_tracker_property_ptr, void* __result) {
    ::new(__result) (std::unique_ptr<SlintTypeErasedWidget>)(__cpp_closure_5340870668741211730_impl(animation_tracker_property_ptr));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QMargins __cpp_closure_3798652648335511663_impl() {
#line 35 "qt_widgets/lineedit.rs"
                                                               
                ensure_initialized();
                QStyleOptionFrame option;
                option.state |= QStyle::State_Enabled;
                option.lineWidth = 1;
                option.midLineWidth = 0;
                // Just some size big enough to be sure that the frame fits in it
                option.rect = QRect(0, 0, 10000, 10000);
                QRect contentsRect = qApp->style()->subElementRect(
                    QStyle::SE_LineEditContents, &option);

                // ### remove extra margins

                return {
                    (2 + contentsRect.left()),
                    (4 + contentsRect.top()),
                    (2 + option.rect.right() - contentsRect.right()),
                    (4 + option.rect.bottom() - contentsRect.bottom())
                };
            
}
extern "C" {
void __cpp_closure_3798652648335511663( void* __result) {
    ::new(__result) (QMargins)(__cpp_closure_3798652648335511663_impl());
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_403437355621553844(QPainterPtr* const& painter, QWidget* const& widget, QSize const& size, float const& dpr, bool const& enabled, bool const& has_focus, int const& initial_state) {
#line 141 "qt_widgets/lineedit.rs"
           
            QStyleOptionFrame option;
            option.styleObject = widget;
            option.state |= QStyle::State(initial_state);
            option.rect = QRect(QPoint(), size / dpr);
            option.lineWidth = 1;
            option.midLineWidth = 0;
            if (enabled) {
                option.state |= QStyle::State_Enabled;
                if (has_focus)
                    option.state |= QStyle::State_HasFocus;
            } else {
                option.palette.setCurrentColorGroup(QPalette::Disabled);
            }
            qApp->style()->drawPrimitive(QStyle::PE_PanelLineEdit, &option, painter->get(), widget);
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline std::unique_ptr<SlintTypeErasedWidget> __cpp_closure_9990096098687644718_impl(void* const& animation_tracker_property_ptr) {
#line 38 "qt_widgets/scrollview.rs"
                                                                                                                                                                
            return make_unique_animated_widget<QWidget>(animation_tracker_property_ptr);
        
}
extern "C" {
void __cpp_closure_9990096098687644718(void* const& animation_tracker_property_ptr, void* __result) {
    ::new(__result) (std::unique_ptr<SlintTypeErasedWidget>)(__cpp_closure_9990096098687644718_impl(animation_tracker_property_ptr));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QMargins __cpp_closure_18440509822070786489_impl() {
#line 45 "qt_widgets/scrollview.rs"
                                                           
            ensure_initialized();
            QStyleOptionSlider option;
            initQSliderOptions(option, false, true, 0, 0, 1000, 1000, false);

            int extent = qApp->style()->pixelMetric(QStyle::PM_ScrollBarExtent, &option, nullptr);
            int sliderMin = qApp->style()->pixelMetric(QStyle::PM_ScrollBarSliderMin, &option, nullptr);
            auto horizontal_size = qApp->style()->sizeFromContents(QStyle::CT_ScrollBar, &option, QSize(extent * 2 + sliderMin, extent), nullptr);
            option.state ^= QStyle::State_Horizontal;
            option.orientation = Qt::Vertical;
            extent = qApp->style()->pixelMetric(QStyle::PM_ScrollBarExtent, &option, nullptr);
            sliderMin = qApp->style()->pixelMetric(QStyle::PM_ScrollBarSliderMin, &option, nullptr);
            auto vertical_size = qApp->style()->sizeFromContents(QStyle::CT_ScrollBar, &option, QSize(extent, extent * 2 + sliderMin), nullptr);

            QStyleOptionFrame frameOption;
            frameOption.rect = QRect(QPoint(), QSize(1000, 1000));
            frameOption.frameShape = QFrame::StyledPanel;
            frameOption.lineWidth = 1;
            frameOption.midLineWidth = 0;
            QRect cr = qApp->style()->subElementRect(QStyle::SE_ShapedFrameContents, &frameOption, nullptr);
            return {
                cr.left(),
                cr.top(),
                (vertical_size.width() + frameOption.rect.right() - cr.right()),
                (horizontal_size.height() + frameOption.rect.bottom() - cr.bottom())
            };
        
}
extern "C" {
void __cpp_closure_18440509822070786489( void* __result) {
    ::new(__result) (QMargins)(__cpp_closure_18440509822070786489_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline int __cpp_closure_14509979239950317062_impl(QPoint const& pos, int const& value, int const& page_size, int const& max, QSize const& size, int const& active_controls, bool const& pressed, bool const& horizontal) {
#line 146 "qt_widgets/scrollview.rs"
                               
                ensure_initialized();
                QStyleOptionSlider option;
                initQSliderOptions(option, pressed, true, active_controls, 0, max, -value, false);
                option.pageStep = page_size;
                if (!horizontal) {
                    option.state ^= QStyle::State_Horizontal;
                    option.orientation = Qt::Vertical;
                }
                auto style = qApp->style();
                option.rect = { QPoint{}, size };
                return style->hitTestComplexControl(QStyle::CC_ScrollBar, &option, pos, nullptr);
            
}
extern "C" {
void __cpp_closure_14509979239950317062(QPoint const& pos, int const& value, int const& page_size, int const& max, QSize const& size, int const& active_controls, bool const& pressed, bool const& horizontal, void* __result) {
    ::new(__result) (int)(__cpp_closure_14509979239950317062_impl(pos, value, page_size, max, size, active_controls, pressed, horizontal));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline int __cpp_closure_12638606059052988933_impl() {
#line 162 "qt_widgets/scrollview.rs"
                                               return QStyle::SC_ScrollBarSlider;
}
extern "C" {
void __cpp_closure_12638606059052988933( void* __result) {
    ::new(__result) (int)(__cpp_closure_12638606059052988933_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline int __cpp_closure_7264362064048604032_impl(int const& active_controls, int const& value, int const& max, int const& page_size) {
#line 182 "qt_widgets/scrollview.rs"
                                                                                                                                            
                        switch (active_controls) {
                            case QStyle::SC_ScrollBarAddPage:
                                return -value + page_size;
                            case QStyle::SC_ScrollBarSubPage:
                                return -value - page_size;
                            case QStyle::SC_ScrollBarAddLine:
                                return -value + 3.;
                            case QStyle::SC_ScrollBarSubLine:
                                return -value - 3.;
                            case QStyle::SC_ScrollBarFirst:
                                return 0;
                            case QStyle::SC_ScrollBarLast:
                                return max;
                            default:
                                return -value;
                        }
                    
}
extern "C" {
void __cpp_closure_7264362064048604032(int const& active_controls, int const& value, int const& max, int const& page_size, void* __result) {
    ::new(__result) (int)(__cpp_closure_7264362064048604032_impl(active_controls, value, max, page_size));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline bool __cpp_closure_14874288972817923082_impl(QPainterPtr* const& painter, QWidget* const& widget, QSize const& size, float const& dpr, QMargins const& margins, bool const& enabled, bool const& has_focus, int const& initial_state, bool const& scrollbar_bar_visible) {
#line 311 "qt_widgets/scrollview.rs"
                             
            ensure_initialized();
            QStyleOptionFrame frameOption;
            frameOption.styleObject = widget;
            frameOption.state |= QStyle::State(initial_state);
            frameOption.frameShape = QFrame::StyledPanel;

            frameOption.lineWidth = 1;
            frameOption.midLineWidth = 0;
            frameOption.rect = QRect(QPoint(), size / dpr);
            frameOption.state |= QStyle::State_Sunken;
            if (enabled) {
                frameOption.state |= QStyle::State_Enabled;
            } else {
                frameOption.palette.setCurrentColorGroup(QPalette::Disabled);
            }
            if (has_focus)
                frameOption.state |= QStyle::State_HasFocus;
            //int scrollOverlap = qApp->style()->pixelMetric(QStyle::PM_ScrollView_ScrollBarOverlap, &frameOption, nullptr);
            bool foac = qApp->style()->styleHint(QStyle::SH_ScrollView_FrameOnlyAroundContents, &frameOption, widget);
            // this assume that the frame size is the same on both side, so that the scrollbar width is (right-left)
            QSize corner_size = QSize(margins.right() - margins.left(), margins.bottom() - margins.top());
            if (foac) {
                frameOption.rect = QRect(QPoint(), (size / dpr) - corner_size);
                qApp->style()->drawControl(QStyle::CE_ShapedFrame, &frameOption, painter->get(), widget);
                frameOption.rect = QRect(frameOption.rect.bottomRight() + QPoint(1, 1), corner_size);
                if (scrollbar_bar_visible) {
                    qApp->style()->drawPrimitive(QStyle::PE_PanelScrollAreaCorner, &frameOption, painter->get(), widget);
                }
            } else {
                qApp->style()->drawControl(QStyle::CE_ShapedFrame, &frameOption, painter->get(), widget);
                frameOption.rect = QRect(frameOption.rect.bottomRight() + QPoint(1, 1) - QPoint(margins.right(), margins.bottom()), corner_size);
                if (scrollbar_bar_visible) {
                    qApp->style()->drawPrimitive(QStyle::PE_PanelScrollAreaCorner, &frameOption, painter->get(), widget);
                }
            }
            return foac;
        
}
extern "C" {
void __cpp_closure_14874288972817923082(QPainterPtr* const& painter, QWidget* const& widget, QSize const& size, float const& dpr, QMargins const& margins, bool const& enabled, bool const& has_focus, int const& initial_state, bool const& scrollbar_bar_visible, void* __result) {
    ::new(__result) (bool)(__cpp_closure_14874288972817923082_impl(painter, widget, size, dpr, margins, enabled, has_focus, initial_state, scrollbar_bar_visible));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_18247458387525563994(QPainterPtr* const& painter, QWidget* const& widget, int const& value, int const& page_size, int const& max, QRectF const& rect, int const& active_controls, bool const& pressed, float const& dpr, bool const& horizontal, bool const& has_focus, int const& initial_state) {
#line 371 "qt_widgets/scrollview.rs"
               
                QPainter *painter_ = painter->get();
                auto r = rect.toAlignedRect();
                // The mac style may crash on invalid rectangles (#595)
                if (!r.isValid())
                    return;
                // The mac style ignores painter translations (due to CGContextRef redirection) as well as
                // option.rect's top-left - hence this hack with an intermediate buffer.
            #if defined(Q_OS_MAC)
                QImage scrollbar_image(r.size(), QImage::Format_ARGB32_Premultiplied);
                scrollbar_image.fill(Qt::transparent);
                {QPainter p(&scrollbar_image); QPainter *painter_ = &p;
            #else
                painter_->save();
                auto cleanup = qScopeGuard([&] { painter_->restore(); });
                painter_->translate(r.topLeft()); // There is bugs in the styles if the scrollbar is not in (0,0)
            #endif
                QStyleOptionSlider option;
                option.state |= QStyle::State(initial_state);
                option.rect = QRect(QPoint(), r.size());
                initQSliderOptions(option, pressed, true, active_controls, 0, max / dpr, -value / dpr, false);
                option.subControls = QStyle::SC_All;
                option.pageStep = page_size / dpr;
                if (has_focus)
                    option.state |= QStyle::State_HasFocus;

                if (!horizontal) {
                    option.state ^= QStyle::State_Horizontal;
                    option.orientation = Qt::Vertical;
                }

                auto style = qApp->style();
                style->drawComplexControl(QStyle::CC_ScrollBar, &option, painter_, widget);
            #if defined(Q_OS_MAC)
                }
                (painter_)->drawImage(r.topLeft(), scrollbar_image);
            #endif
            
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QSize __cpp_closure_11673313264035969848_impl(int const& index, QString const& text, bool const& combobox) {
#line 50 "qt_widgets/listviewitem.rs"
                                        
            ensure_initialized();

            QStyleOptionComboBox cb_opt;
            if (combobox && qApp->style()->styleHint(QStyle::SH_ComboBox_Popup, &cb_opt, nullptr)) {
                QStyleOptionMenuItem option;
                option.text = text;
                option.text.replace(QChar('&'), QLatin1String("&&"));
                return qApp->style()->sizeFromContents(QStyle::CT_MenuItem, &option, QSize{}, nullptr);
            } else {
                QStyleOptionViewItem option;
                option.decorationPosition = QStyleOptionViewItem::Left;
                option.decorationAlignment = Qt::AlignCenter;
                option.displayAlignment = Qt::AlignLeft|Qt::AlignVCenter;
                option.showDecorationSelected = qApp->style()->styleHint(QStyle::SH_ItemView_ShowDecorationSelected, nullptr, nullptr);
                if (index % 2) {
                    option.features |= QStyleOptionViewItem::Alternate;
                }
                option.features |= QStyleOptionViewItem::HasDisplay;
                option.text = text;
                return qApp->style()->sizeFromContents(QStyle::CT_ItemViewItem, &option, QSize{}, nullptr);
                }
        
}
extern "C" {
void __cpp_closure_11673313264035969848(int const& index, QString const& text, bool const& combobox, void* __result) {
    ::new(__result) (QSize)(__cpp_closure_11673313264035969848_impl(index, text, combobox));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_7822264948931615045(QPainterPtr* const& painter, QWidget* const& widget, QSize const& size, float const& dpr, int const& index, bool const& is_selected, bool const& has_hover, bool const& has_focus, QString const& text, int const& initial_state, bool const& combobox) {
#line 136 "qt_widgets/listviewitem.rs"
           
            QStyleOptionComboBox cb_opt;
            if (combobox && qApp->style()->styleHint(QStyle::SH_ComboBox_Popup, &cb_opt, widget)) {
                widget->setProperty("_q_isComboBoxPopupItem", true);
                QStyleOptionMenuItem option;
                option.styleObject = widget;
                option.state |= QStyle::State(initial_state);
                option.rect = QRect(QPoint(), size / dpr);
                option.menuRect = QRect(QPoint(), size / dpr);
                option.state = QStyle::State_Enabled;
                if (has_hover) {
                    option.state |= QStyle::State_MouseOver;
                    option.state |= QStyle::State_Selected;
                }

                if (has_focus) {
                    option.state |= QStyle::State_HasFocus;
                    option.state |= QStyle::State_Selected;
                }
                option.text = text;
                option.text.replace(QChar('&'), QLatin1String("&&"));
                option.checked = is_selected;
                option.menuItemType = QStyleOptionMenuItem::Normal;
                //option.reservedShortcutWidth = 0;
                //option.maxIconWidth = 4;

                qApp->style()->drawControl(QStyle::CE_MenuItem, &option, painter->get(), widget);
                widget->setProperty("_q_isComboBoxPopupItem", {});
            } else {
                QStyleOptionViewItem option;
                option.styleObject = widget;
                option.state |= QStyle::State(initial_state);
                option.rect = QRect(QPoint(), size / dpr);
                option.state |= QStyle::State_Enabled;
                if (is_selected) {
                    option.state |= QStyle::State_Selected;
                }
                if (has_hover) {
                    option.state |= QStyle::State_MouseOver;
                }
                if (has_focus) {
                    option.state |= QStyle::State_HasFocus;
                }
                option.decorationPosition = QStyleOptionViewItem::Left;
                option.decorationAlignment = Qt::AlignCenter;
                option.displayAlignment = Qt::AlignLeft|Qt::AlignVCenter;
                option.showDecorationSelected = qApp->style()->styleHint(QStyle::SH_ItemView_ShowDecorationSelected, nullptr, nullptr);

                if (index % 2) {
                    option.features |= QStyleOptionViewItem::Alternate;
                }
                option.features |= QStyleOptionViewItem::HasDisplay;

                option.text = text;

                qApp->style()->drawPrimitive(QStyle::PE_PanelItemViewRow, &option, painter->get(), widget);
                qApp->style()->drawControl(QStyle::CE_ItemViewItem, &option, painter->get(), widget);
            }
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline std::unique_ptr<SlintTypeErasedWidget> __cpp_closure_17304023508259932303_impl(void* const& animation_tracker_property_ptr) {
#line 26 "qt_widgets/combobox.rs"
                                                                                                                                                                
            return make_unique_animated_widget<QComboBox>(animation_tracker_property_ptr);
        
}
extern "C" {
void __cpp_closure_17304023508259932303(void* const& animation_tracker_property_ptr, void* __result) {
    ::new(__result) (std::unique_ptr<SlintTypeErasedWidget>)(__cpp_closure_17304023508259932303_impl(animation_tracker_property_ptr));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QSize __cpp_closure_9842042231192069352_impl(QWidget* const& widget) {
#line 37 "qt_widgets/combobox.rs"
                                                                                    
            ensure_initialized();
            QStyleOptionComboBox option;
            // FIXME
            option.rect = option.fontMetrics.boundingRect("******************");
            option.subControls = QStyle::SC_All;
            return qApp->style()->sizeFromContents(QStyle::CT_ComboBox, &option, option.rect.size(), widget);
        
}
extern "C" {
void __cpp_closure_9842042231192069352(QWidget* const& widget, void* __result) {
    ::new(__result) (QSize)(__cpp_closure_9842042231192069352_impl(widget));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_10582539576836454639(QPainterPtr* const& painter, QWidget* const& widget, QString const& text, bool const& enabled, QSize const& size, bool const& down, bool const& is_open, bool const& has_focus, bool const& has_hover, float const& dpr, int const& initial_state) {
#line 112 "qt_widgets/combobox.rs"
           
            ensure_initialized();
            QStyleOptionComboBox option;
            option.styleObject = widget;
            option.state |= QStyle::State(initial_state);
            option.currentText = std::move(text);
            option.rect = QRect(QPoint(), size / dpr);
            if (down)
                option.state |= QStyle::State_Sunken;
            else
                option.state |= QStyle::State_Raised;
            if (enabled) {
                option.state |= QStyle::State_Enabled;
            } else {
                option.palette.setCurrentColorGroup(QPalette::Disabled);
            }
            if (has_focus) {
                option.state |= QStyle::State_HasFocus | QStyle::State_KeyboardFocusChange | QStyle::State_Item;
            }
            if (has_hover) {
                option.state |= QStyle::State_MouseOver;
            }
            // FIXME: This is commented out to workaround #456
            if (is_open) {
            //    option.state |= QStyle::State_On;
            }
            option.subControls = QStyle::SC_All;
            qApp->style()->drawComplexControl(QStyle::CC_ComboBox, &option, painter->get(), widget);
            qApp->style()->drawControl(QStyle::CE_ComboBoxLabel, &option, painter->get(), widget);
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_672031727912196774(QPainterPtr* const& painter, QWidget* const& widget, QSize const& size, float const& dpr, int const& initial_state) {
#line 222 "qt_widgets/combobox.rs"
           
            ensure_initialized();
            QStyleOptionComboBox cb_option;
            QStyleOptionFrame option;
            option.styleObject = widget;
            option.state |= QStyle::State(initial_state);
            option.lineWidth = 0;
            option.midLineWidth = 0;
            option.rect = QRect(QPoint(), size / dpr);
            option.state |= QStyle::State_Sunken | QStyle::State_Enabled;

            auto style = qApp->style();
            painter->get()->fillRect(option.rect, option.palette.window());

            if (style->styleHint(QStyle::SH_ComboBox_Popup, &cb_option, widget)) {
                style->drawPrimitive(QStyle::PE_PanelMenu, &option, painter->get(), widget);
                auto vm = style->pixelMetric(QStyle::PM_MenuVMargin, &option, widget);
                auto hm = style->pixelMetric(QStyle::PM_MenuHMargin, &option, widget);
                painter->get()->fillRect(option.rect.adjusted(hm, vm, -hm, -vm), option.palette.window());
            } else {
                option.lineWidth = 1;
            }
            auto frameStyle = style->styleHint(QStyle::SH_ComboBox_PopupFrameStyle, &option, widget);
            if ((frameStyle & QFrame::Shadow_Mask) == QFrame::Sunken)
                option.state |= QStyle::State_Sunken;
            else if ((frameStyle & QFrame::Shadow_Mask) == QFrame::Raised)
                option.state |= QStyle::State_Raised;
            option.frameShape = QFrame::Shape(frameStyle & QFrame::Shape_Mask);
            style->drawControl(QStyle::CE_ShapedFrame, &option, painter->get(), widget);
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline std::unique_ptr<SlintTypeErasedWidget> __cpp_closure_14982214807313185788_impl(void* const& animation_tracker_property_ptr) {
#line 41 "qt_widgets/tabwidget.rs"
                                                                                                                                                               
            return make_unique_animated_widget<QTabWidget>(animation_tracker_property_ptr);
        
}
extern "C" {
void __cpp_closure_14982214807313185788(void* const& animation_tracker_property_ptr, void* __result) {
    ::new(__result) (std::unique_ptr<SlintTypeErasedWidget>)(__cpp_closure_14982214807313185788_impl(animation_tracker_property_ptr));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline TabWidgetMetrics __cpp_closure_5367423239582594642_impl(bool const& horizontal, QSizeF const& size, QSizeF const& tabbar_size) {
#line 126 "qt_widgets/tabwidget.rs"
                                                                                                                                     
                ensure_initialized();
                QStyleOptionTabWidgetFrame option;
                auto style = qApp->style();
                option.lineWidth = style->pixelMetric(QStyle::PM_DefaultFrameWidth, 0, nullptr);
                option.shape = QTabBar::RoundedNorth;
                option.rect = QRect(QPoint(), size.toSize());
                option.tabBarSize = tabbar_size.toSize();
                option.tabBarRect = QRect(QPoint(), option.tabBarSize);
                option.rightCornerWidgetSize = QSize(0, 0);
                option.leftCornerWidgetSize = QSize(0, 0);
                QRectF contentsRect = style->subElementRect(QStyle::SE_TabWidgetTabContents, &option, nullptr);
                QRectF tabbarRect = style->subElementRect(QStyle::SE_TabWidgetTabBar, &option, nullptr);
                if (horizontal) {
                    return {contentsRect.x(), contentsRect.width(), tabbarRect.x(), tabbarRect.width()};
                } else {
                    return {contentsRect.y(), contentsRect.height(), tabbarRect.y(), tabbarRect.height()};
                }
            
}
extern "C" {
void __cpp_closure_5367423239582594642(bool const& horizontal, QSizeF const& size, QSizeF const& tabbar_size, void* __result) {
    ::new(__result) (TabWidgetMetrics)(__cpp_closure_5367423239582594642_impl(horizontal, size, tabbar_size));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QSize __cpp_closure_9989742430644401423_impl(QSizeF const& content_size, QSizeF const& tabbar_size, QWidget* const& widget) {
#line 206 "qt_widgets/tabwidget.rs"
                                                                                                                                       
            ensure_initialized();

            QStyleOptionTabWidgetFrame option;
            auto style = qApp->style();
            option.lineWidth = style->pixelMetric(QStyle::PM_DefaultFrameWidth, 0, widget);
            option.shape = QTabBar::RoundedNorth;
            option.tabBarSize = tabbar_size.toSize();
            option.rightCornerWidgetSize = QSize(0, 0);
            option.leftCornerWidgetSize = QSize(0, 0);
            auto sz = QSize(qMax(content_size.width(), tabbar_size.width()),
                content_size.height() + tabbar_size.height());
            return style->sizeFromContents(QStyle::CT_TabWidget, &option, sz, widget);
        
}
extern "C" {
void __cpp_closure_9989742430644401423(QSizeF const& content_size, QSizeF const& tabbar_size, QWidget* const& widget, void* __result) {
    ::new(__result) (QSize)(__cpp_closure_9989742430644401423_impl(content_size, tabbar_size, widget));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_12746733787558737137(QPainterPtr* const& painter, QWidget* const& widget, QSize const& size, float const& dpr, QSizeF const& tabbar_size, int const& initial_state) {
#line 282 "qt_widgets/tabwidget.rs"
           
            QStyleOptionTabWidgetFrame option;
            option.styleObject = widget;
            option.state |= QStyle::State(initial_state);
            auto style = qApp->style();
            option.lineWidth = style->pixelMetric(QStyle::PM_DefaultFrameWidth, 0, widget);
            option.shape = QTabBar::RoundedNorth;
            if (true /*enabled*/) {
                option.state |= QStyle::State_Enabled;
            } else {
                option.palette.setCurrentColorGroup(QPalette::Disabled);
            }
            option.rect = QRect(QPoint(), size / dpr);
            option.tabBarSize = tabbar_size.toSize();
            option.rightCornerWidgetSize = QSize(0, 0);
            option.leftCornerWidgetSize = QSize(0, 0);
            option.tabBarRect = style->subElementRect(QStyle::SE_TabWidgetTabBar, &option, widget);
            option.rect = style->subElementRect(QStyle::SE_TabWidgetTabPane, &option, widget);
            style->drawPrimitive(QStyle::PE_FrameTabWidget, &option, painter->get(), widget);

            /* -- we don't need to draw the base since we already draw the frame
                QStyleOptionTab tabOverlap;
                tabOverlap.shape = option.shape;
                int overlap = style->pixelMetric(QStyle::PM_TabBarBaseOverlap, &tabOverlap, widget);
                QStyleOptionTabBarBase optTabBase;
                static_cast<QStyleOption&>(optTabBase) = (option);
                optTabBase.shape = option.shape;
                optTabBase.rect = option.tabBarRect;
                if (overlap > 0) {
                    optTabBase.rect.setHeight(optTabBase.rect.height() - overlap);
                }
                optTabBase.tabBarRect = option.tabBarRect;
                optTabBase.selectedTabRect = option.selectedTabRect;
                style->drawPrimitive(QStyle::PE_FrameTabBarBase, &optTabBase, painter->get(), widget);*/
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QSize __cpp_closure_2468459335274609921_impl(QString const& text, QPixmap const& icon, int const& tab_index, int const& num_tabs, QWidget* const& widget) {
#line 371 "qt_widgets/tabwidget.rs"
                                        
            ensure_initialized();
            QStyleOptionTab option;
            option.rect = option.fontMetrics.boundingRect(text);
            option.text = text;
            option.icon = icon;
            option.shape = QTabBar::RoundedNorth;
            option.position = num_tabs == 1 ? QStyleOptionTab::OnlyOneTab
                : tab_index == 0 ? QStyleOptionTab::Beginning
                : tab_index == num_tabs - 1 ? QStyleOptionTab::End
                : QStyleOptionTab::Middle;
            auto style = qApp->style();
            int hframe = style->pixelMetric(QStyle::PM_TabBarTabHSpace, &option, widget);
            int vframe = style->pixelMetric(QStyle::PM_TabBarTabVSpace, &option, widget);
            int padding = icon.isNull() ? 0 : 4;
            int textWidth = option.fontMetrics.size(Qt::TextShowMnemonic, text).width();
            auto iconSize = icon.isNull() ? 0 : style->pixelMetric(QStyle::PM_TabBarIconSize, nullptr, widget);
            QSize csz = QSize(textWidth + iconSize + hframe + padding, qMax(option.fontMetrics.height(), iconSize) + vframe);
            return style->sizeFromContents(QStyle::CT_TabBarTab, &option, csz, nullptr);
        
}
extern "C" {
void __cpp_closure_2468459335274609921(QString const& text, QPixmap const& icon, int const& tab_index, int const& num_tabs, QWidget* const& widget, void* __result) {
    ::new(__result) (QSize)(__cpp_closure_2468459335274609921_impl(text, icon, tab_index, num_tabs, widget));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline bool __cpp_closure_3466892205214495409_impl() {
#line 437 "qt_widgets/tabwidget.rs"
                                                               
            return qApp->style()->styleHint(QStyle::SH_TabBar_SelectMouseType, nullptr, nullptr) == QEvent::MouseButtonPress;
        
}
extern "C" {
void __cpp_closure_3466892205214495409( void* __result) {
    ::new(__result) (bool)(__cpp_closure_3466892205214495409_impl());
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_10288774338165551456(QPainterPtr* const& painter, QWidget* const& widget, QString const& text, QPixmap const& icon, bool const& enabled, QSize const& size, bool const& down, float const& dpr, int const& tab_index, int const& current, int const& current_focused, int const& num_tabs, int const& initial_state) {
#line 497 "qt_widgets/tabwidget.rs"
           
            ensure_initialized();
            QStyleOptionTab option;
            option.styleObject = widget;
            option.state |= QStyle::State(initial_state);
            option.rect = QRect(QPoint(), size / dpr);;
            option.text = text;
            option.icon = icon;
            option.shape = QTabBar::RoundedNorth;
            option.position = num_tabs == 1 ? QStyleOptionTab::OnlyOneTab
                : tab_index == 0 ? QStyleOptionTab::Beginning
                : tab_index == num_tabs - 1 ? QStyleOptionTab::End
                : QStyleOptionTab::Middle;
            /* -- does not render correctly with the fusion style because we don't draw the selected on top
                option.selectedPosition = current == tab_index - 1 ? QStyleOptionTab::NextIsSelected
                    : current == tab_index + 1 ? QStyleOptionTab::PreviousIsSelected : QStyleOptionTab::NotAdjacent;*/
            if (down)
                option.state |= QStyle::State_Sunken;
            else
                option.state |= QStyle::State_Raised;
            if (enabled) {
                option.state |= QStyle::State_Enabled;
            } else {
                option.palette.setCurrentColorGroup(QPalette::Disabled);
            }
            if (current == tab_index)
                option.state |= QStyle::State_Selected;
            if (current_focused == tab_index) {
                option.state |= QStyle::State_HasFocus | QStyle::State_KeyboardFocusChange | QStyle::State_Item;
            }
            option.features |= QStyleOptionTab::HasFrame;
            qApp->style()->drawControl(QStyle::CE_TabBarTab, &option, painter->get(), widget);
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline bool __cpp_closure_38823387563205963_impl() {
#line 87 "qt_widgets/stylemetrics.rs"
                                                             
            static QMutex mtx;
            QMutexLocker locker(&mtx);
            ensure_initialized();
            return qApp->thread() != QThread::currentThread();
        
}
extern "C" {
void __cpp_closure_38823387563205963( void* __result) {
    ::new(__result) (bool)(__cpp_closure_38823387563205963_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline void* __cpp_closure_11359973888368234292_impl(void* const& self) {
#line 98 "qt_widgets/stylemetrics.rs"
                                                                                                 
                return new StyleChangeListener(self);
            
}
extern "C" {
void __cpp_closure_11359973888368234292(void* const& self, void* __result) {
    ::new(__result) (void*)(__cpp_closure_11359973888368234292_impl(self));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline float __cpp_closure_4574639710486581746_impl() {
#line 103 "qt_widgets/stylemetrics.rs"
                                                               
            int spacing = qApp->style()->pixelMetric(QStyle::PM_LayoutHorizontalSpacing);
            if (spacing < 0)
                spacing = qApp->style()->layoutSpacing(QSizePolicy::DefaultType, QSizePolicy::DefaultType, Qt::Horizontal);
            return spacing;
        
}
extern "C" {
void __cpp_closure_4574639710486581746( void* __result) {
    ::new(__result) (float)(__cpp_closure_4574639710486581746_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline float __cpp_closure_16601796555330137161_impl() {
#line 110 "qt_widgets/stylemetrics.rs"
                                                               
            return qApp->style()->pixelMetric(QStyle::PM_LayoutLeftMargin);
        
}
extern "C" {
void __cpp_closure_16601796555330137161( void* __result) {
    ::new(__result) (float)(__cpp_closure_16601796555330137161_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline float __cpp_closure_12838742386914833748_impl() {
#line 114 "qt_widgets/stylemetrics.rs"
                                                                  
            return qApp->style()->pixelMetric(QStyle::PM_TextCursorWidth);
        
}
extern "C" {
void __cpp_closure_12838742386914833748( void* __result) {
    ::new(__result) (float)(__cpp_closure_12838742386914833748_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRgb __cpp_closure_13874773887690146333_impl() {
#line 118 "qt_widgets/stylemetrics.rs"
                                                                
            return qApp->palette().color(QPalette::Window).rgba();
        
}
extern "C" {
void __cpp_closure_13874773887690146333( void* __result) {
    ::new(__result) (QRgb)(__cpp_closure_13874773887690146333_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRgb __cpp_closure_4752771569616093277_impl() {
#line 123 "qt_widgets/stylemetrics.rs"
                                                                 
            return qApp->palette().color(QPalette::WindowText).rgba();
        
}
extern "C" {
void __cpp_closure_4752771569616093277( void* __result) {
    ::new(__result) (QRgb)(__cpp_closure_4752771569616093277_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline int __cpp_closure_11576390817734733773_impl() {
#line 127 "qt_widgets/stylemetrics.rs"
                                                               
            return QFontInfo(qApp->font()).pixelSize();
        
}
extern "C" {
void __cpp_closure_11576390817734733773( void* __result) {
    ::new(__result) (int)(__cpp_closure_11576390817734733773_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRgb __cpp_closure_15650811048642184384_impl() {
#line 131 "qt_widgets/stylemetrics.rs"
                                                                  
            return qApp->palette().color(QPalette::Text).rgba();
        
}
extern "C" {
void __cpp_closure_15650811048642184384( void* __result) {
    ::new(__result) (QRgb)(__cpp_closure_15650811048642184384_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRgb __cpp_closure_3312937857332981672_impl() {
#line 135 "qt_widgets/stylemetrics.rs"
                                                                           
            return qApp->palette().color(QPalette::Disabled, QPalette::Text).rgba();
        
}
extern "C" {
void __cpp_closure_3312937857332981672( void* __result) {
    ::new(__result) (QRgb)(__cpp_closure_3312937857332981672_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRgb __cpp_closure_13667554797349304447_impl() {
#line 140 "qt_widgets/stylemetrics.rs"
                                                                  
            return qApp->palette().color(QPalette::Base).rgba();
        
}
extern "C" {
void __cpp_closure_13667554797349304447( void* __result) {
    ::new(__result) (QRgb)(__cpp_closure_13667554797349304447_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRgb __cpp_closure_1016739886174290626_impl() {
#line 144 "qt_widgets/stylemetrics.rs"
                                                                           
            return qApp->palette().color(QPalette::Disabled, QPalette::Base).rgba();
        
}
extern "C" {
void __cpp_closure_1016739886174290626( void* __result) {
    ::new(__result) (QRgb)(__cpp_closure_1016739886174290626_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRgb __cpp_closure_10276448366224966685_impl() {
#line 149 "qt_widgets/stylemetrics.rs"
                                                                
            return qApp->palette().color(QPalette::PlaceholderText).rgba();
        
}
extern "C" {
void __cpp_closure_10276448366224966685( void* __result) {
    ::new(__result) (QRgb)(__cpp_closure_10276448366224966685_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRgb __cpp_closure_643516477108008858_impl() {
#line 153 "qt_widgets/stylemetrics.rs"
                                                                         
            return qApp->palette().color(QPalette::Disabled, QPalette::PlaceholderText).rgba();
        
}
extern "C" {
void __cpp_closure_643516477108008858( void* __result) {
    ::new(__result) (QRgb)(__cpp_closure_643516477108008858_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline uint32_t __cpp_closure_12800379137693472340_impl() {
#line 169 "qt_widgets/stylemetrics.rs"
                                                                    
            switch (qApp->style()->styleHint(QStyle::SH_TabBar_Alignment)) {
                case Qt::AlignLeft: return 1;
                case Qt::AlignCenter: return 2;
                case Qt::AlignRight: return 3;
                default: return 0;
            }
        
}
extern "C" {
void __cpp_closure_12800379137693472340( void* __result) {
    ::new(__result) (uint32_t)(__cpp_closure_12800379137693472340_impl());
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_8402334352085785731(StyleChangeListener* const& scl) {
#line 204 "qt_widgets/stylemetrics.rs"
                                                  delete scl; 
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRgb __cpp_closure_8985543812895918383_impl() {
#line 112 "qt_widgets/palette.rs"
                                                                
            return qApp->palette().color(QPalette::Link).rgba();
        
}
extern "C" {
void __cpp_closure_8985543812895918383( void* __result) {
    ::new(__result) (QRgb)(__cpp_closure_8985543812895918383_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRgb __cpp_closure_13243925457049350900_impl() {
#line 118 "qt_widgets/palette.rs"
                                                                
            #if QT_VERSION >= QT_VERSION_CHECK(6, 6, 0)
                return qApp->palette().color(QPalette::Accent).rgba();
            #else
                return qApp->palette().color(QPalette::Highlight).rgba();
            #endif
        
}
extern "C" {
void __cpp_closure_13243925457049350900( void* __result) {
    ::new(__result) (QRgb)(__cpp_closure_13243925457049350900_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRgb __cpp_closure_13223695453319830661_impl() {
#line 128 "qt_widgets/palette.rs"
                                                                 
            return qApp->palette().color(QPalette::Button).rgba();
        
}
extern "C" {
void __cpp_closure_13223695453319830661( void* __result) {
    ::new(__result) (QRgb)(__cpp_closure_13223695453319830661_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRgb __cpp_closure_5615994801203106006_impl() {
#line 134 "qt_widgets/palette.rs"
                                                                 
            return qApp->palette().color(QPalette::ButtonText).rgba();
        
}
extern "C" {
void __cpp_closure_5615994801203106006( void* __result) {
    ::new(__result) (QRgb)(__cpp_closure_5615994801203106006_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRgb __cpp_closure_11593647207622327789_impl() {
#line 140 "qt_widgets/palette.rs"
                                                     
            return qApp->palette().color(QPalette::Midlight).rgba();
        
}
extern "C" {
void __cpp_closure_11593647207622327789( void* __result) {
    ::new(__result) (QRgb)(__cpp_closure_11593647207622327789_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRgb __cpp_closure_9206057754558017915_impl() {
#line 146 "qt_widgets/palette.rs"
                                                                   
            return qApp->palette().color(QPalette::Highlight).rgba();
        
}
extern "C" {
void __cpp_closure_9206057754558017915( void* __result) {
    ::new(__result) (QRgb)(__cpp_closure_9206057754558017915_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRgb __cpp_closure_8345569266233112597_impl() {
#line 152 "qt_widgets/palette.rs"
                                                                   
            return qApp->palette().color(QPalette::HighlightedText).rgba();
        
}
extern "C" {
void __cpp_closure_8345569266233112597( void* __result) {
    ::new(__result) (QRgb)(__cpp_closure_8345569266233112597_impl());
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline void* __cpp_closure_15311581242381027733_impl(void* const& self) {
#line 169 "qt_widgets/palette.rs"
                                                                                                 
                return new PaletteStyleChangeListener(self);
            
}
extern "C" {
void __cpp_closure_15311581242381027733(void* const& self, void* __result) {
    ::new(__result) (void*)(__cpp_closure_15311581242381027733_impl(self));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_11162987224734228542(PaletteStyleChangeListener* const& scl) {
#line 194 "qt_widgets/palette.rs"
                                                         delete scl; 
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QSize __cpp_closure_3378788048216831797_impl(int const& index, QString const& text, QWidget* const& widget) {
#line 42 "qt_widgets/tableheadersection.rs"
                                        
            ensure_initialized();

            QStyleOptionHeader option;
            option.state |= QStyle::State_Horizontal;
            option.section = index;

            option.text = text;

            option.textAlignment = Qt::AlignCenter | Qt::AlignVCenter;
            return qApp->style()->sizeFromContents(QStyle::CT_HeaderSection, &option, QSize{}, widget);
        
}
extern "C" {
void __cpp_closure_3378788048216831797(int const& index, QString const& text, QWidget* const& widget, void* __result) {
    ::new(__result) (QSize)(__cpp_closure_3378788048216831797_impl(index, text, widget));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_7527483434982092427(QPainterPtr* const& painter, QWidget* const& widget, QSize const& size, float const& dpr, int const& index, bool const& has_hover, QString const& text, int const& initial_state, bool const& ascending, bool const& descending) {
#line 116 "qt_widgets/tableheadersection.rs"
           
            QPainter *painter_ = painter->get();

            #if defined(Q_OS_MAC)
                QImage header_image(size, QImage::Format_ARGB32_Premultiplied);
                header_image.fill(Qt::transparent);
                {QPainter p(&header_image); QPainter *painter_ = &p;
            #endif

            QStyleOptionHeader option;
            option.styleObject = widget;
            option.state |= QStyle::State(initial_state);
            option.state |= QStyle::State_Horizontal | QStyle::State_Enabled;
            option.rect = QRect(QPoint(), size / dpr);

            option.section = index;

            option.textAlignment = Qt::AlignLeft | Qt::AlignVCenter;

            if (ascending) {
                option.sortIndicator = QStyleOptionHeader::SortDown;
            } else if (descending) {
                option.sortIndicator = QStyleOptionHeader::SortUp;
            } else {
                option.sortIndicator = QStyleOptionHeader::None;
            }

            if (has_hover) {
                option.state |= QStyle::State_MouseOver;
            }

            option.text = text;

            qApp->style()->drawControl(QStyle::CE_Header, &option, painter_, widget);

            #if defined(Q_OS_MAC)
                }
                (painter_)->drawImage(QPoint(), header_image);
            #endif
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_1649062070360772397(QPainterPtr* const& self) {
#line 461 "qt_window.rs"
                                              
            (*self)->restore();
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_464443924098933516(QPainterPtr* const& self) {
#line 467 "qt_window.rs"
                                              
            (*self)->save();
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_12852602435673639350(QPainterPath* const& self, QPointF const& to) {
#line 484 "qt_window.rs"
                                                                  
            self->moveTo(to);
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_2365821089015888895(QPainterPath* const& self, QPointF const& to) {
#line 489 "qt_window.rs"
                                                                  
            self->lineTo(to);
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_16352908959648011123(QPainterPath* const& self, QPointF const& ctrl, QPointF const& to) {
#line 494 "qt_window.rs"
                                                                                     
            self->quadTo(ctrl, to);
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_2184623836221718985(QPainterPath* const& self, QPointF const& ctrl1, QPointF const& ctrl2, QPointF const& to) {
#line 504 "qt_window.rs"
                                                                                                          
            self->cubicTo(ctrl1, ctrl2, to);
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_3803775266274234648(QPainterPath* const& self) {
#line 510 "qt_window.rs"
                                                 
            self->closeSubpath();
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_3642031532500415244(QPainterPath* const& self, Qt::FillRule const& rule) {
#line 516 "qt_window.rs"
                                                                          
            self->setFillRule(rule);
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QBrush __cpp_closure_486260135050940837_impl(QRgb const& color) {
#line 541 "qt_window.rs"
                                                                          
                return QBrush(QColor::fromRgba(color));
            
}
extern "C" {
void __cpp_closure_486260135050940837(QRgb const& color, void* __result) {
    ::new(__result) (QBrush)(__cpp_closure_486260135050940837_impl(color));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QLinearGradient __cpp_closure_16537301410194668304_impl(QPointF const& p1, QPointF const& p2) {
#line 554 "qt_window.rs"
                                                                                                   
                    QLinearGradient qlg(p1, p2);
                    return qlg;
                
}
extern "C" {
void __cpp_closure_16537301410194668304(QPointF const& p1, QPointF const& p2, void* __result) {
    ::new(__result) (QLinearGradient)(__cpp_closure_16537301410194668304_impl(p1, p2));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_14349155111584591723(QLinearGradient & qlg, float const& pos, QRgb const& color) {
#line 563 "qt_window.rs"
                                                                                              
                    qlg.setColorAt(pos, QColor::fromRgba(color));
                
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QBrush __cpp_closure_17558158200359373769_impl(QLinearGradient const& qlg) {
#line 567 "qt_window.rs"
                                                                                    
                return QBrush(qlg);
            
}
extern "C" {
void __cpp_closure_17558158200359373769(QLinearGradient const& qlg, void* __result) {
    ::new(__result) (QBrush)(__cpp_closure_17558158200359373769_impl(qlg));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRadialGradient __cpp_closure_1258256177269320827_impl(qreal const& width, qreal const& height) {
#line 574 "qt_window.rs"
                                                                                                      
                    QRadialGradient qrg(width / 2, height / 2, (width + height) / 4);
                    return qrg;
                
}
extern "C" {
void __cpp_closure_1258256177269320827(qreal const& width, qreal const& height, void* __result) {
    ::new(__result) (QRadialGradient)(__cpp_closure_1258256177269320827_impl(width, height));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_7378051255955452620(QRadialGradient & qrg, float const& pos, QRgb const& color) {
#line 583 "qt_window.rs"
                                                                                              
                    qrg.setColorAt(pos, QColor::fromRgba(color));
                
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QBrush __cpp_closure_16716437033865551237_impl(QRadialGradient const& qrg) {
#line 587 "qt_window.rs"
                                                                                    
                return QBrush(qrg);
            
}
extern "C" {
void __cpp_closure_16716437033865551237(QRadialGradient const& qrg, void* __result) {
    ::new(__result) (QBrush)(__cpp_closure_16716437033865551237_impl(qrg));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_10719911171513569396(QPainterPtr* const& painter, QBrush const& brush, QRectF const& rect) {
#line 641 "qt_window.rs"
                                                                                        
            (*painter)->fillRect(rect, brush);
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_540285221162230364(QPainterPtr* const& painter, QRectF const& rect, QBrush const& fill_brush, QBrush const& stroke_brush, QString & string, QFont const& font, bool const& elide, Qt::Alignment const& alignment, bool const& wrap, bool const& word_wrap, bool const& stroke_visible, bool const& stroke_outside, float const& stroke_width) {
#line 706 "qt_window.rs"
                                                                                                                                                                                                                                                                                                                                  
            QString elided;
            if (!elide) {
                elided = string;
            } else if (!wrap) {
                QFontMetrics fm(font);
                while (!string.isEmpty()) {
                    int pos = string.indexOf('\n');
                    if (pos < 0) {
                        elided += fm.elidedText(string, Qt::ElideRight, rect.width());
                        break;
                    }
                    QString line = string.left(pos);
                    elided += fm.elidedText(line, Qt::ElideRight, rect.width());
                    elided += '\n';
                    string = string.mid(pos + 1);
                }
            } else {
                // elide and word wrap: we need to add the ellipsis manually on the last line
                string.replace(QChar('\n'), QChar::LineSeparator);
                elided = string;
                QFontMetrics fm(font);
                QTextLayout layout(string, font);
                QTextOption options;
                if (word_wrap) {
                    options.setWrapMode(QTextOption::WordWrap);
                } else {
                    options.setWrapMode(QTextOption::WrapAnywhere);
                }
                layout.setTextOption(options);
                layout.setCacheEnabled(true);
                layout.beginLayout();
                int leading = fm.leading();
                qreal height = 0;
                int last_line_begin = 0, last_line_size = 0;
                while (true) {
                    auto line = layout.createLine();
                    if (!line.isValid()) {
                        last_line_begin = string.size();
                        break;
                    }
                    line.setLineWidth(rect.width());
                    height += leading + line.height();
                    if (height > rect.height()) {
                        break;
                    }
                    last_line_begin = line.textStart();
                    last_line_size = line.textLength();
                }
                if (last_line_begin < string.size()) {
                    elided = string.left(last_line_begin);
                    QString to_elide = QStringView(string).mid(last_line_begin, last_line_size).trimmed() % QStringView(QT_UNICODE_LITERAL("…"));
                    elided += fm.elidedText(to_elide, Qt::ElideRight, rect.width());
                }
            }

            if (!stroke_visible) {
                int flags = alignment;
                if (wrap) {
                    if (word_wrap) {
                        flags |= Qt::TextWordWrap;
                    } else {
                        flags |= Qt::TextWrapAnywhere;
                    }
                }

                (*painter)->setFont(font);
                (*painter)->setBrush(Qt::NoBrush);
                (*painter)->setPen(QPen(fill_brush, 0));
                (*painter)->drawText(rect, flags, elided);
            } else {
                QTextDocument document(elided);
                document.setDocumentMargin(0);
                document.setPageSize(rect.size());
                document.setDefaultFont(font);

                QTextOption options = document.defaultTextOption();
                options.setAlignment(alignment);
                if (wrap) {
                    if (word_wrap) {
                        options.setWrapMode(QTextOption::WordWrap);
                    } else {
                        options.setWrapMode(QTextOption::WrapAnywhere);
                    }
                }
                document.setDefaultTextOption(options);

                // Workaround for https://bugreports.qt.io/browse/QTBUG-13467
                float dy = 0;
                if (!(alignment & Qt::AlignTop)) {
                    QRectF bounding_rect;
                    for (QTextBlock it = document.begin(); it != document.end(); it = it.next()) {
                        bounding_rect = bounding_rect.united(document.documentLayout()->blockBoundingRect(it));
                    }
                    if (alignment & Qt::AlignVCenter) {
                        dy = (rect.height() - bounding_rect.height()) / 2.0;
                    } else if (alignment & Qt::AlignBottom) {
                        dy = (rect.height() - bounding_rect.height());
                    }
                }

                QTextCharFormat format;
                format.setFont(font);

                QPen stroke_pen(stroke_brush, stroke_width, Qt::SolidLine, Qt::FlatCap, Qt::MiterJoin);
                stroke_pen.setMiterLimit(10.0);
                if (stroke_width == 0.0) {
                    // Hairline stroke
                    if (stroke_outside)
                        stroke_pen.setWidthF(2.0);
                    else
                        stroke_pen.setWidthF(1.0);
                    stroke_pen.setCosmetic(true);
                }

                QTextCursor cursor(&document);
                cursor.select(QTextCursor::Document);

                (*painter)->save();
                (*painter)->translate(0, dy);

                if (stroke_outside) {
                    format.setForeground(Qt::NoBrush);
                    format.setTextOutline(stroke_pen);
                    cursor.mergeCharFormat(format);
                    document.drawContents((*painter).get(), rect);
                }

                format.setForeground(fill_brush);
                if (!stroke_outside) {
                    format.setTextOutline(stroke_pen);
                } else {
                    // Use a transparent pen instead of Qt::NoPen so the
                    // fill is aligned properly to the outside stroke
                    format.setTextOutline(QPen(QColor(Qt::transparent), stroke_width));
                }
                cursor.mergeCharFormat(format);
                document.drawContents((*painter).get(), rect);

                (*painter)->restore();
            }
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_4105647935001844544(QPainterPtr* const& painter, QRectF const& rect, QBrush const& fill_brush, QRgb const& selection_foreground_color, QRgb const& selection_background_color, bool const& underline_selection, QString & string, int const& flags, bool const& single_line, QFont const& font, int const& selection_start_position, int const& selection_end_position, int const& cursor_position, float const& text_cursor_width) {
#line 945 "qt_window.rs"
                                               
            if (!single_line) {
                string.replace(QChar('\n'), QChar::LineSeparator);
            }
            QTextLayout layout(string, font);
            do_text_layout(layout, flags, rect);
            (*painter)->setPen(QPen(fill_brush, 0));
            QVector<QTextLayout::FormatRange> selections;
            if (selection_end_position != selection_start_position) {
                QTextCharFormat fmt;
                if (qAlpha(selection_background_color) != 0) {
                    fmt.setBackground(QColor::fromRgba(selection_background_color));
                }
                if (qAlpha(selection_background_color) != 0) {
                    fmt.setForeground(QColor::fromRgba(selection_foreground_color));
                }
                if (underline_selection) {
                    fmt.setFontUnderline(true);
                }
                selections << QTextLayout::FormatRange{
                    std::min(selection_end_position, selection_start_position),
                    std::abs(selection_end_position - selection_start_position),
                    fmt
                };
            }
            layout.draw(painter->get(), rect.topLeft(), selections);
            if (text_cursor_width > 0) {
                layout.drawCursor(painter->get(), rect.topLeft(), cursor_position, text_cursor_width);
            }
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_853280220912364950(QPainterPtr* const& painter, QPoint const& pos, QPainterPath & painter_path, QBrush const& fill_brush, QBrush const& stroke_brush, float const& stroke_width) {
#line 1028 "qt_window.rs"
                                          
            (*painter)->save();
            auto cleanup = qScopeGuard([&] { (*painter)->restore(); });
            (*painter)->translate(pos);
            (*painter)->setPen(stroke_width > 0 ? QPen(stroke_brush, stroke_width) : Qt::NoPen);
            (*painter)->setBrush(fill_brush);
            (*painter)->drawPath(painter_path);
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QPainterPtr __cpp_closure_1522131389279688610_impl(QImage* const& img) {
#line 1057 "qt_window.rs"
                                                                                                   
                    return std::make_unique<QPainter>(img);
                
}
extern "C" {
void __cpp_closure_1522131389279688610(QImage* const& img, void* __result) {
    ::new(__result) (QPainterPtr)(__cpp_closure_1522131389279688610_impl(img));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QPixmap __cpp_closure_3376788343252054843_impl(QImage* const& img, float const& blur_radius) {
#line 1076 "qt_window.rs"
                                                                                                       
                        class PublicGraphicsBlurEffect : public QGraphicsBlurEffect {
                        public:
                            // Make public what's protected
                            using QGraphicsBlurEffect::draw;
                        };

                        // Need a scene for the effect source private to draw()
                        QGraphicsScene scene;

                        auto pixmap_item = scene.addPixmap(QPixmap::fromImage(*img));

                        auto blur_effect = new PublicGraphicsBlurEffect;
                        blur_effect->setBlurRadius(blur_radius);
                        blur_effect->setBlurHints(QGraphicsBlurEffect::QualityHint);

                        // takes ownership of the effect and registers the item with
                        // the effect as source.
                        pixmap_item->setGraphicsEffect(blur_effect);

                        QImage blurred_scene(img->width() + 2 * blur_radius, img->height() + 2 * blur_radius, QImage::Format_ARGB32_Premultiplied);
                        blurred_scene.fill(Qt::transparent);

                        QPainter p(&blurred_scene);
                        p.translate(blur_radius, blur_radius);
                        blur_effect->draw(&p);
                        p.end();

                        return QPixmap::fromImage(blurred_scene);
                    
}
extern "C" {
void __cpp_closure_3376788343252054843(QImage* const& img, float const& blur_radius, void* __result) {
    ::new(__result) (QPixmap)(__cpp_closure_3376788343252054843_impl(img, blur_radius));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QPixmap __cpp_closure_16201730587410762266_impl(QImage* const& img) {
#line 1107 "qt_window.rs"
                                                                                      
                        return QPixmap::fromImage(*img);
                    
}
extern "C" {
void __cpp_closure_16201730587410762266(QImage* const& img, void* __result) {
    ::new(__result) (QPixmap)(__cpp_closure_16201730587410762266_impl(img));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_8901884381653659609(QPainterPtr* const& painter, QPointF const& shadow_offset, QPixmap const& pixmap) {
#line 1125 "qt_window.rs"
               
            (*painter)->drawPixmap(shadow_offset, pixmap);
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline bool __cpp_closure_4005499549141126962_impl(QPainterPtr* const& painter, QRectF const& clip_rect, float const& top_left_radius, float const& top_right_radius, float const& bottom_right_radius, float const& bottom_left_radius) {
#line 1184 "qt_window.rs"
                                                                  
            if (top_left_radius <= 0 && top_right_radius <= 0 && bottom_right_radius <= 0 && bottom_left_radius <= 0) {
                (*painter)->setClipRect(clip_rect, Qt::IntersectClip);
            } else {
                QPainterPath path = to_painter_path(clip_rect, top_left_radius, top_right_radius, bottom_right_radius, bottom_left_radius);
                (*painter)->setClipPath(path, Qt::IntersectClip);
            }
            return !(*painter)->clipBoundingRect().isEmpty();
        
}
extern "C" {
void __cpp_closure_4005499549141126962(QPainterPtr* const& painter, QRectF const& clip_rect, float const& top_left_radius, float const& top_right_radius, float const& bottom_right_radius, float const& bottom_left_radius, void* __result) {
    ::new(__result) (bool)(__cpp_closure_4005499549141126962_impl(painter, clip_rect, top_left_radius, top_right_radius, bottom_right_radius, bottom_left_radius));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRectF __cpp_closure_4142581747713064936_impl(const QPainterPtr* const& painter) {
#line 1197 "qt_window.rs"
                                                                                                   
            return (*painter)->clipBoundingRect();
        
}
extern "C" {
void __cpp_closure_4142581747713064936(const QPainterPtr* const& painter, void* __result) {
    ::new(__result) (QRectF)(__cpp_closure_4142581747713064936_impl(painter));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_5518309140305952661(QPainterPtr* const& painter, int const& width, int const& height, const unsigned char * const& data) {
#line 1229 "qt_window.rs"
                                                                                                                          
                QImage img(data, width, height, width * 4, QImage::Format_RGBA8888_Premultiplied);
                (*painter)->drawImage(QPoint(), img);
            
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_13866301048610829791(QPainterPtr* const& painter, QBrush const& fill_brush, QString & string, QFont const& font) {
#line 1241 "qt_window.rs"
                                                                                                                     
            (*painter)->setFont(font);
            (*painter)->setPen(QPen(fill_brush, 0));
            (*painter)->setBrush(Qt::NoBrush);
            (*painter)->drawText(0, QFontMetrics((*painter)->font()).ascent(), string);
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_6185362906572090699(QPainterPtr* const& painter, float const& x, float const& y) {
#line 1265 "qt_window.rs"
                                                                               
            (*painter)->translate(x, y);
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_8657648301843346995(QPainterPtr* const& painter, float const& angle_in_degrees) {
#line 1272 "qt_window.rs"
                                                                                
            (*painter)->rotate(angle_in_degrees);
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_3811314287807305976(QPainterPtr* const& painter, float const& opacity) {
#line 1279 "qt_window.rs"
                                                                       
            (*painter)->setOpacity((*painter)->opacity() * opacity);
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QPixmap __cpp_closure_344045398902059685_impl(QImage::Format const& format, int const& width, int const& height, uint32_t const& bytes_per_line, const uchar * const& buffer_ptr) {
#line 1303 "qt_window.rs"
                                                                                                                                                                                            
        QImage img(buffer_ptr, width, height, bytes_per_line, format);
        return QPixmap::fromImage(img);
    
}
extern "C" {
void __cpp_closure_344045398902059685(QImage::Format const& format, int const& width, int const& height, uint32_t const& bytes_per_line, const uchar * const& buffer_ptr, void* __result) {
    ::new(__result) (QPixmap)(__cpp_closure_344045398902059685_impl(format, width, height, bytes_per_line, buffer_ptr));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_12468714679373021499(QPixmap & pixmap, QBrush const& brush) {
#line 1372 "qt_window.rs"
                                                                                  
                            QPainter p(&pixmap);
                            p.setCompositionMode(QPainter::CompositionMode_SourceIn);
                            p.fillRect(QRect(QPoint(), pixmap.size()), brush);
                        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_6386766718153401618(QPainterPtr* const& painter, QPixmap const& pixmap, QRectF const& source_rect, QRectF const& dest_rect, bool const& smooth, float const& scale_x, float const& scale_y, QPoint const& offset) {
#line 1433 "qt_window.rs"
                       
                        (*painter)->save();
                        (*painter)->setRenderHint(QPainter::SmoothPixmapTransform, smooth);
                        auto transform = QTransform::fromScale(1 / scale_x, 1 / scale_y);
                        auto scaled_destination = (dest_rect * transform).boundingRect();
                        QPixmap source_pixmap = pixmap.copy(source_rect.toRect());
                        (*painter)->scale(scale_x, scale_y);
                        (*painter)->drawTiledPixmap(scaled_destination, source_pixmap, offset);
                        (*painter)->restore();
                    
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_9823922925559717700(QPainterPtr* const& painter, QPixmap const& pixmap, QRectF const& source_rect, QRectF const& dest_rect, bool const& smooth) {
#line 1450 "qt_window.rs"
                                           
                    (*painter)->save();
                    (*painter)->setRenderHint(QPainter::SmoothPixmapTransform, smooth);
                    (*painter)->drawPixmap(dest_rect, pixmap, source_rect);
                    (*painter)->restore();
                
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_14694546065196372407(QPainterPtr* const& painter, QBrush const& brush, QBrush const& border_color, float const& border_width, float const& top_left_radius, float const& top_right_radius, float const& bottom_left_radius, float const& bottom_right_radius, QRectF & rect) {
#line 1487 "qt_window.rs"
                                       
            (*painter)->setBrush(brush);
            QPen pen = border_width > 0 ? QPen(border_color, border_width, Qt::SolidLine, Qt::FlatCap, Qt::MiterJoin) : Qt::NoPen;
            if (top_left_radius <= 0 && top_right_radius <= 0 && bottom_left_radius <= 0 && bottom_right_radius <= 0) {
                if (!border_color.isOpaque() && border_width > 1) {
                    // In case of transparent pen, we want the background to cover the whole rectangle, which Qt doesn't do.
                    // So first draw the background, then draw the pen over it
                    (*painter)->setPen(Qt::NoPen);
                    (*painter)->drawRect(rect);
                    (*painter)->setBrush(QBrush());
                }
                rect.adjust(border_width / 2, border_width / 2, -border_width / 2, -border_width / 2);
                (*painter)->setPen(pen);
                (*painter)->drawRect(rect);
            } else {
                if (!border_color.isOpaque() && border_width > 1) {
                    // See adjustment below
                    float tl_r = qFuzzyIsNull(top_left_radius) ? top_left_radius : qMax(border_width/2, top_left_radius);
                    float tr_r = qFuzzyIsNull(top_right_radius) ? top_right_radius : qMax(border_width/2, top_right_radius);
                    float br_r = qFuzzyIsNull(bottom_right_radius) ? bottom_right_radius : qMax(border_width/2, bottom_right_radius);
                    float bl_r = qFuzzyIsNull(bottom_left_radius) ? bottom_left_radius : qMax(border_width/2, bottom_left_radius);
                    // In case of transparent pen, we want the background to cover the whole rectangle, which Qt doesn't do.
                    // So first draw the background, then draw the pen over it
                    (*painter)->setPen(Qt::NoPen);
                    (*painter)->drawPath(to_painter_path(rect, tl_r, tr_r, br_r, bl_r));
                    (*painter)->setBrush(QBrush());
                }
                // Qt's border radius is in the middle of the border. But we want it to be the radius of the rectangle itself.
                // This is incorrect if border_radius < border_width/2,  but this can't be fixed. Better to have a radius a bit too big than no radius at all
                float tl_r = qMax(0.0f, top_left_radius - border_width / 2);
                float tr_r = qMax(0.0f, top_right_radius - border_width / 2);
                float br_r = qMax(0.0f, bottom_right_radius - border_width / 2);
                float bl_r = qMax(0.0f, bottom_left_radius - border_width / 2);
                rect.adjust(border_width / 2, border_width / 2, -border_width / 2, -border_width / 2);
                (*painter)->setPen(pen);
                (*painter)->drawPath(to_painter_path(rect, tl_r, tr_r, br_r, bl_r));
            }
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline float __cpp_closure_10617709909169143064_impl(QPainterPtr* const& painter) {
#line 1534 "qt_window.rs"
                                                                                   
                return (*painter)->paintEngine()->paintDevice()->devicePixelRatioF();
            
}
extern "C" {
void __cpp_closure_10617709909169143064(QPainterPtr* const& painter, void* __result) {
    ::new(__result) (float)(__cpp_closure_10617709909169143064_impl(painter));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QPainterPtr __cpp_closure_17054483328645168010_impl(QImage* const& img_ref, float const& dpr) {
#line 1550 "qt_window.rs"
                                                                                                                        
                img_ref->setDevicePixelRatio(dpr);
                auto painter = std::make_unique<QPainter>(img_ref);
                painter->setClipRect(0, 0, img_ref->width(), img_ref->height());
                painter->setRenderHints(QPainter::Antialiasing | QPainter::SmoothPixmapTransform);
                return painter;
            
}
extern "C" {
void __cpp_closure_17054483328645168010(QImage* const& img_ref, float const& dpr, void* __result) {
    ::new(__result) (QPainterPtr)(__cpp_closure_17054483328645168010_impl(img_ref, dpr));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_9891812740514992603(QPainterPtr* const& painter, QPixmap* const& layer_image_ref) {
#line 1596 "qt_window.rs"
                   
                (*painter)->drawPixmap(0, 0, *layer_image_ref);
            
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_9359914316805131505(SlintWidget* const& widget_ptr) {
#line 1635 "qt_window.rs"
                                                      
            // widget_ptr uses deleteLater to destroy the SlintWidget, we must prevent events to still call us
            widget_ptr->rust_window = nullptr;
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline std::unique_ptr<QWidget, QWidgetDeleteLater> __cpp_closure_4450188545556432904_impl(void* const& window_ptr) {
#line 1646 "qt_window.rs"
                                                                                                                                   
                ensure_initialized(true);
                auto widget = std::unique_ptr<SlintWidget, QWidgetDeleteLater>(new SlintWidget, QWidgetDeleteLater());

                auto accessibility = new Slint_accessible_window(widget.get(), window_ptr);
                QAccessible::registerAccessibleInterface(accessibility);

                return widget;
            
}
extern "C" {
void __cpp_closure_4450188545556432904(void* const& window_ptr, void* __result) {
    ::new(__result) (std::unique_ptr<QWidget, QWidgetDeleteLater>)(__cpp_closure_4450188545556432904_impl(window_ptr));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_10532412091371046783(SlintWidget* const& widget_ptr, void* const& rust_window) {
#line 1668 "qt_window.rs"
                                                                              
            widget_ptr->rust_window = rust_window;
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_8717079145132141262(QWidget* const& widget_ptr) {
#line 1711 "qt_window.rs"
                                                      
                auto accessible = dynamic_cast<Slint_accessible_window*>(QAccessible::queryAccessibleInterface(widget_ptr));
                if (accessible->isUsed()) { accessible->updateAccessibilityTree(); }
            
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline bool __cpp_closure_952623391652831975_impl(QWidget* const& widget_ptr) {
#line 1766 "qt_window.rs"
                                                                                    
            return widget_ptr->isMinimized();
        
}
extern "C" {
void __cpp_closure_952623391652831975(QWidget* const& widget_ptr, void* __result) {
    ::new(__result) (bool)(__cpp_closure_952623391652831975_impl(widget_ptr));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline bool __cpp_closure_11858850094086137533_impl(QWidget* const& widget_ptr) {
#line 1774 "qt_window.rs"
                                                                                    
            return widget_ptr->isMaximized();
        
}
extern "C" {
void __cpp_closure_11858850094086137533(QWidget* const& widget_ptr, void* __result) {
    ::new(__result) (bool)(__cpp_closure_11858850094086137533_impl(widget_ptr));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline bool __cpp_closure_5304224080370648665_impl(QWidget* const& widget_ptr) {
#line 1782 "qt_window.rs"
                                                                                     
            return widget_ptr->isFullScreen();
        
}
extern "C" {
void __cpp_closure_5304224080370648665(QWidget* const& widget_ptr, void* __result) {
    ::new(__result) (bool)(__cpp_closure_5304224080370648665_impl(widget_ptr));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_11551986095512863757(QString const& xdg_app_id) {
#line 1806 "qt_window.rs"
                                                    
                QGuiApplication::setDesktopFileName(xdg_app_id);
            
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_3670146560777811635(QWidget* const& widget_ptr) {
#line 1813 "qt_window.rs"
                                                     
                widget_ptr->show();
            
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QString __cpp_closure_13994133164806549231_impl() {
#line 1816 "qt_window.rs"
                                                                                     
                return QGuiApplication::platformName();
            
}
extern "C" {
void __cpp_closure_13994133164806549231( void* __result) {
    ::new(__result) (QString)(__cpp_closure_13994133164806549231_impl());
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_4299892459750497637(QWidget* const& widget_ptr) {
#line 1826 "qt_window.rs"
                                                     

                bool wasVisible = widget_ptr->isVisible();

                widget_ptr->hide();
                if (wasVisible) {
                    // Since we don't call close(), try to compute whether this was the last window and that
                    // we must end the application
                    auto windows = QGuiApplication::topLevelWindows();
                    bool visible_windows_left = std::any_of(windows.begin(), windows.end(), [](auto window) {
                        return window->isVisible() || window->transientParent();
                    });
                    g_lastWindowClosed = !visible_windows_left;
                }
            
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QPoint __cpp_closure_11068078868944764816_impl(QWidget* const& widget_ptr) {
#line 1848 "qt_window.rs"
                                                                                         
            return widget_ptr->pos();
        
}
extern "C" {
void __cpp_closure_11068078868944764816(QWidget* const& widget_ptr, void* __result) {
    ::new(__result) (QPoint)(__cpp_closure_11068078868944764816_impl(widget_ptr));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_17581564638369524671(QWidget* const& widget_ptr, QPoint const& pos) {
#line 1861 "qt_window.rs"
                                                                  
            widget_ptr->move(pos);
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_2297686687320278477(QWidget* const& widget_ptr, QSize const& sz) {
#line 1872 "qt_window.rs"
                                                                
            widget_ptr->resize(sz);
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QSize __cpp_closure_17017393042878158597_impl(QWidget* const& widget_ptr) {
#line 1881 "qt_window.rs"
                                                                                      
            return widget_ptr->size();
        
}
extern "C" {
void __cpp_closure_17017393042878158597(QWidget* const& widget_ptr, void* __result) {
    ::new(__result) (QSize)(__cpp_closure_17017393042878158597_impl(widget_ptr));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_13332991410370037354(QWidget* const& widget_ptr) {
#line 1889 "qt_window.rs"
                                                 
            // If embedded as a QWidget, just use regular QWidget::update(), but if we're a top-level,
            // then use requestUpdate() to achieve frame-throttling.
            if (widget_ptr->parentWidget()) {
                widget_ptr->update();
            } else if (auto w = widget_ptr->window()->windowHandle()) {
                w->requestUpdate();
            }
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_5026805549942774157(QWidget* const& widget_ptr, QPixmap const& pixmap) {
#line 1934 "qt_window.rs"
                                                                                  
                        widget_ptr->setWindowIcon(QIcon(pixmap));
                    
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_924442104871289070(QWidget* const& widget_ptr, QString const& title, QSize const& size, QBrush const& background, bool const& no_frame, bool const& always_on_top, bool const& fullscreen, bool const& minimized, bool const& maximized) {
#line 1946 "qt_window.rs"
                                                                                       

            if (size != widget_ptr->size()) {
                widget_ptr->resize(size.expandedTo({1, 1}));
            }

            widget_ptr->setWindowFlag(Qt::FramelessWindowHint, no_frame);
            widget_ptr->setWindowFlag(Qt::WindowStaysOnTopHint, always_on_top);

                        {
                // Depending on the request, we either set or clear the bits.
                // See also: https://doc.qt.io/qt-6/qt.html#WindowState-enum
                auto state = widget_ptr->windowState();

                if (fullscreen != widget_ptr->isFullScreen()) {
                    state = state ^ Qt::WindowFullScreen;
                }
                if (minimized != widget_ptr->isMinimized()) {
                    state = state ^ Qt::WindowMinimized;
                }
                if (maximized != widget_ptr->isMaximized()) {
                    state = state ^ Qt::WindowMaximized;
                }

                widget_ptr->setWindowState(state);
            }

            widget_ptr->setWindowTitle(title);
            auto pal = widget_ptr->palette();

            #if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
            // If the background color is the same as what NativeStyleMetrics supplied from QGuiApplication::palette().color(QPalette::Window),
            // then the setColor (implicitly setBrush) call will not detach the palette. However it will set the resolveMask, which due to the
            // lack of a detach changes QGuiApplicationPrivate::app_pal's resolve mask and thus breaks future theme based palette changes.
            // Therefore we force a detach.
            // https://bugreports.qt.io/browse/QTBUG-98762
            {
                pal.setResolveMask(~pal.resolveMask());
                pal.setResolveMask(~pal.resolveMask());
            }
            #endif
            pal.setBrush(QPalette::Window, background);
            widget_ptr->setPalette(pal);
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_17841906502778211716(QWidget* const& widget_ptr, QSize const& min_size, QSize const& max_size) {
#line 2005 "qt_window.rs"
                                                                                            
            widget_ptr->setMinimumSize(min_size);
            widget_ptr->setMaximumSize(max_size);
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_18352940533039372166(QWidget* const& widget_ptr, QWidget* const& popup_ptr, QPoint const& pos, QSize const& size) {
#line 2044 "qt_window.rs"
                                                                                                            
            popup_ptr->setParent(widget_ptr, Qt::Popup);
            popup_ptr->setGeometry(QRect(pos + widget_ptr->mapToGlobal(QPoint(0,0)), size));
            popup_ptr->show();
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_8908923102365601556(QWidget* const& widget_ptr, Qt::CursorShape const& cursor_shape) {
#line 2086 "qt_window.rs"
                                                                                    
            widget_ptr->setCursor(QCursor{cursor_shape});
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_5734903486017716914(QWidget* const& widget_ptr) {
#line 2095 "qt_window.rs"
                                                         
                    widget_ptr->setAttribute(Qt::WA_InputMethodEnabled, true);
                
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_4327348512357289730(SlintWidget* const& widget_ptr) {
#line 2101 "qt_window.rs"
                                                             
                    widget_ptr->ime_text = "";
                    widget_ptr->ime_cursor = 0;
                    widget_ptr->ime_anchor = 0;
                    widget_ptr->setAttribute(Qt::WA_InputMethodEnabled, false);
                
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_5883359174670135531(SlintWidget* const& widget_ptr, QRectF const& rect, int const& cursor, int const& anchor, QString const& text) {
#line 2123 "qt_window.rs"
                                                                                                                             
            widget_ptr->ime_position = rect.toRect();
            widget_ptr->ime_text = text;
            widget_ptr->ime_cursor = cursor;
            widget_ptr->ime_anchor = anchor;
            QGuiApplication::inputMethod()->update(Qt::ImQueryInput);
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_12521012638284443808(QWidget* const& widget_ptr, void* const& item) {
#line 2140 "qt_window.rs"
                                                                      
                auto accessible = QAccessible::queryAccessibleInterface(widget_ptr);
                if (auto slint_accessible = dynamic_cast<Slint_accessible*>(accessible)) {
                    slint_accessible->clearFocus();
                    slint_accessible->focusItem(item);
                }
            
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline bool __cpp_closure_11308899529623633931_impl() {
#line 2153 "qt_window.rs"
                                                      
                    return qApp->palette().color(QPalette::Window).valueF() < 0.5;
                
}
extern "C" {
void __cpp_closure_11308899529623633931( void* __result) {
    ::new(__result) (bool)(__cpp_closure_11308899529623633931_impl());
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_6982890402279296689(QWidget* const& widget_ptr) {
#line 2167 "qt_window.rs"
                                                 
            widget_ptr->raise();
            widget_ptr->activateWindow();
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline size_t __cpp_closure_7748995736964865514_impl(QFont const& font, QString const& string, QPointF const& pos, int const& flags, QRectF const& rect, bool const& single_line) {
#line 2239 "qt_window.rs"
                                                                               
            // we need to do the \n replacement in a copy because the original need to be kept to know the utf8 offset
            auto copy = string;
            if (!single_line) {
                copy.replace(QChar('\n'), QChar::LineSeparator);
            }
            QTextLayout layout(copy, font);
            auto line = do_text_layout(layout, flags, rect, pos.y());
            if (line < 0 || layout.lineCount() <= line)
                return string.toUtf8().size();
            QTextLine textLine = layout.lineAt(line);
            int cur;
            if (pos.x() > textLine.naturalTextWidth()) {
                cur = textLine.textStart() + textLine.textLength();
                // cur is one past the last character of the line (eg, the \n or space).
                // Go one back to get back on this line.
                // Unless we were at the end of the text, in which case there was no \n
                if (cur > textLine.textStart() && (cur < string.size() || string[cur-1] == '\n'))
                    cur--;
            } else {
                cur = textLine.xToCursor(pos.x());
            }
            if (cur < string.size() && string[cur].isLowSurrogate())
                cur++;
            // convert to an utf8 pos;
            return QStringView(string).left(cur).toUtf8().size();
        
}
extern "C" {
void __cpp_closure_7748995736964865514(QFont const& font, QString const& string, QPointF const& pos, int const& flags, QRectF const& rect, bool const& single_line, void* __result) {
    ::new(__result) (size_t)(__cpp_closure_7748995736964865514_impl(font, string, pos, flags, rect, single_line));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QRectF __cpp_closure_198325185678795165_impl(QFont const& font, QString & string, int const& offset, int const& flags, QRectF const& rect, bool const& single_line) {
#line 2297 "qt_window.rs"
                                                
            if (!single_line) {
                string.replace(QChar('\n'), QChar::LineSeparator);
            }
            QTextLayout layout(string, font);
            do_text_layout(layout, flags, rect);

            QTextLine textLine = layout.lineForTextPosition(offset);
            if (!textLine.isValid())
                return QRectF();
            return QRectF(textLine.x() + textLine.cursorToX(offset), layout.position().y() + textLine.y(), 1.0, textLine.height());
        
}
extern "C" {
void __cpp_closure_198325185678795165(QFont const& font, QString & string, int const& offset, int const& flags, QRectF const& rect, bool const& single_line, void* __result) {
    ::new(__result) (QRectF)(__cpp_closure_198325185678795165_impl(font, string, offset, flags, rect, single_line));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_4516979229772369728(QByteArray const& data) {
#line 2321 "qt_window.rs"
                                             
            ensure_initialized(true);
            QFontDatabase::addApplicationFontFromData(data);
        
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_3107730970131331686(QByteArray const& encoded_path) {
#line 2333 "qt_window.rs"
                                                     
            ensure_initialized(true);

            QString requested_path = QFileInfo(QFile::decodeName(encoded_path)).canonicalFilePath();
            static QSet<QString> loaded_app_fonts;
            // QFontDatabase::addApplicationFont unconditionally reads the provided file from disk,
            // while we want to do this only once to avoid things like the live-review going crazy.
            if (!loaded_app_fonts.contains(requested_path)) {
                loaded_app_fonts.insert(requested_path);
                QFontDatabase::addApplicationFont(requested_path);
            }
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QByteArray __cpp_closure_7737936390355430275_impl(QWidget* const& widget_ptr) {
#line 2379 "qt_window.rs"
                                                                                                         
            QPixmap pixmap = widget_ptr->grab();
            QImage image = pixmap.toImage();
            image.convertTo(QImage::Format_ARGB32);
            return QByteArray(reinterpret_cast<const char *>(image.constBits()), image.sizeInBytes());
        
}
extern "C" {
void __cpp_closure_7737936390355430275(QWidget* const& widget_ptr, void* __result) {
    ::new(__result) (QByteArray)(__cpp_closure_7737936390355430275_impl(widget_ptr));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QFont __cpp_closure_1322110927532504243_impl(QString const& family, float const& pixel_size, int const& weight, float const& letter_spacing, bool const& italic) {
#line 2414 "qt_window.rs"
                                                                                                                                                
        QFont f;
        if (!family.isEmpty())
            f.setFamily(family);
        if (pixel_size > 0)
            f.setPixelSize(pixel_size);
        if (weight > 0) {
    #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
            f.setWeight(qMin((weight-100)/8, 99));
    #else
            f.setWeight(QFont::Weight(weight));
    #endif
        }
        f.setLetterSpacing(QFont::AbsoluteSpacing, letter_spacing);
        f.setItalic(italic);
        // Mark all font properties as resolved, to avoid inheriting font properties
        // from the widget hierarchy. Later we call QPainter::setFont, which would
        // merge in unset properties (such as bold, etc.) that it retrieved from
        // the widget the painter is associated with.
    #if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
        f.resolve(QFont::AllPropertiesResolved);
    #else
        f.setResolveMask(QFont::AllPropertiesResolved);
    #endif
        return f;
    
}
extern "C" {
void __cpp_closure_1322110927532504243(QString const& family, float const& pixel_size, int const& weight, float const& letter_spacing, bool const& italic, void* __result) {
    ::new(__result) (QFont)(__cpp_closure_1322110927532504243_impl(family, pixel_size, weight, letter_spacing, italic));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QSizeF __cpp_closure_18332541034312886950_impl(const QFontMetricsF* const& self, QString const& string, QRectF const& r, bool const& char_wrap) {
#line 2454 "qt_window.rs"
                                                
            return self->boundingRect(r, r.isEmpty() ? 0 : ((char_wrap) ? Qt::TextWrapAnywhere : Qt::TextWordWrap) , string).size();
        
}
extern "C" {
void __cpp_closure_18332541034312886950(const QFontMetricsF* const& self, QString const& string, QRectF const& r, bool const& char_wrap, void* __result) {
    ::new(__result) (QSizeF)(__cpp_closure_18332541034312886950_impl(self, string, r, char_wrap));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline float __cpp_closure_1812819827079014435_impl(const QFontMetricsF* const& self) {
#line 2462 "qt_window.rs"
                                   
            return self->ascent();
        
}
extern "C" {
void __cpp_closure_1812819827079014435(const QFontMetricsF* const& self, void* __result) {
    ::new(__result) (float)(__cpp_closure_1812819827079014435_impl(self));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline float __cpp_closure_5140672074059531875_impl(const QFontMetricsF* const& self) {
#line 2469 "qt_window.rs"
                                   
            return self->descent();
        
}
extern "C" {
void __cpp_closure_5140672074059531875(const QFontMetricsF* const& self, void* __result) {
    ::new(__result) (float)(__cpp_closure_5140672074059531875_impl(self));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline float __cpp_closure_7703331374348149874_impl(const QFontMetricsF* const& self) {
#line 2476 "qt_window.rs"
                                   
            return self->capHeight();
        
}
extern "C" {
void __cpp_closure_7703331374348149874(const QFontMetricsF* const& self, void* __result) {
    ::new(__result) (float)(__cpp_closure_7703331374348149874_impl(self));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline float __cpp_closure_3878667728888164284_impl(const QFontMetricsF* const& self) {
#line 2483 "qt_window.rs"
                                   
            return self->xHeight();
        
}
extern "C" {
void __cpp_closure_3878667728888164284(const QFontMetricsF* const& self, void* __result) {
    ::new(__result) (float)(__cpp_closure_3878667728888164284_impl(self));
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline QFontMetricsF __cpp_closure_6601650662320055390_impl(const QFont * const& self) {
#line 2493 "qt_window.rs"
                                                                                     
            return QFontMetricsF(*self);
        
}
extern "C" {
void __cpp_closure_6601650662320055390(const QFont * const& self, void* __result) {
    ::new(__result) (QFontMetricsF)(__cpp_closure_6601650662320055390_impl(self));
}
}
#line 220 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

extern "C" {
void __cpp_closure_12726909694270947669(int const& timeout) {
#line 2518 "qt_window.rs"
                                          
            ensure_initialized(true);
            TimerHandler::instance().timer.start(timeout, &TimerHandler::instance());
        
}
}
#line 239 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"

static inline int __cpp_closure_11513168694657110643_impl() {
#line 2685 "qt_window.rs"
                                                     
        return qApp->style()->styleHint(QStyle::SH_LineEdit_PasswordCharacter, nullptr, nullptr);
    
}
extern "C" {
void __cpp_closure_11513168694657110643( void* __result) {
    ::new(__result) (int)(__cpp_closure_11513168694657110643_impl());
}
}
#line 238 "qt_widgets.rs"
           RUST_CPP_CLASS_HELPER(1895410512180021537, std::unique_ptr<SlintTypeErasedWidget>)
#line 279 "qt_widgets.rs"
           RUST_CPP_CLASS_HELPER(1764849004744599263, PainterClipWorkaround)
#line 454 "qt_window.rs"
           RUST_CPP_CLASS_HELPER(1185910526579773062, QPainterPtr)
#line 473 "qt_window.rs"
            RUST_CPP_CLASS_HELPER(1334557360505652988, QPainterPath)
#line 552 "qt_window.rs"
                       RUST_CPP_CLASS_HELPER(6628039610634793268, QLinearGradient)
#line 572 "qt_window.rs"
                       RUST_CPP_CLASS_HELPER(16344133575315880939, QRadialGradient)
#line 1616 "qt_window.rs"
           RUST_CPP_CLASS_HELPER(373445754053516773, std::unique_ptr<QWidget, QWidgetDeleteLater>)
#line 2442 "qt_window.rs"
            RUST_CPP_CLASS_HELPER(8532611036576937110, QFontMetricsF)
#line 2489 "qt_window.rs"
            RUST_CPP_CLASS_HELPER(12915468682700672051, QFont)
#line 300 "/home/erroe/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cpp_build-0.5.10/src/lib.rs"


namespace rustcpp {

template<typename T>
struct AlignOf {
    struct Inner {
        char a;
        T b;
    };
    static const uintptr_t value = sizeof(Inner) - sizeof(T);
};

template<typename T>
struct Flags {
    static const uintptr_t value =
        (std::is_copy_constructible<T>::value << 0) |
        (std::is_default_constructible<T>::value << 1) |
#if !defined(__GNUC__) || (__GNUC__ + 0 >= 5) || defined(__clang__)
        (std::is_trivially_destructible<T>::value << 2) |
        (std::is_trivially_copyable<T>::value << 3) |
        (std::is_trivially_default_constructible<T>::value << 4) |
#endif
        0;
};

struct SizeAlign {
    uint64_t hash;
    uint64_t size;
    uint64_t align;
    uint64_t flags;
};

struct MetaData {
    uint8_t magic[128];
    uint8_t version[16];
    uint64_t endianness_check;
    uint64_t length;
    SizeAlign data[633];
};

MetaData metadata_17476396009874180260 = {
    { 114, 117, 115, 116, 99, 112, 112, 126, 109, 101, 116, 97, 100, 97, 116, 97, 92, 74, 112, 213, 165, 185, 214, 120, 179, 17, 185, 25, 182, 253, 82, 118, 148, 29, 139, 208, 59, 153, 78, 137, 230, 54, 26, 177, 232, 121, 132, 166, 44, 106, 218, 57, 158, 33, 69, 32, 54, 204, 123, 226, 99, 117, 60, 173, 112, 61, 56, 174, 117, 141, 126, 249, 79, 159, 6, 119, 2, 129, 147, 66, 135, 136, 212, 252, 231, 105, 239, 91, 96, 232, 113, 94, 164, 255, 152, 144, 64, 207, 192, 90, 225, 171, 59, 154, 60, 2, 0, 191, 114, 182, 38, 134, 134, 183, 212, 227, 31, 217, 12, 5, 65, 221, 150, 59, 230, 96, 73, 62 },
    "0.5.10",
    0xffef,
    633,
    { {13660798664382024109ull, 0, 1, 0ull << 32}, {10237296277533982771ull, 0, 1, 0ull << 32}, {
                3096938983811971374ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value | 0ull << 32
            }, {
                3096938983811971374ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {17335763750398892063ull, 0, 1, 0ull << 32}, {15034730818811667015ull, 0, 1, 0ull << 32}, {
                15034730818811667015ull,
                sizeof(TraitObject),
                rustcpp::AlignOf<TraitObject>::value,
                rustcpp::Flags<TraitObject>::value
            }, {274099984103762149ull, 0, 1, 0ull << 32}, {
                274099984103762149ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                274099984103762149ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                6735153420083102814ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value | 0ull << 32
            }, {
                6735153420083102814ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                9200663706693917720ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value | 0ull << 32
            }, {
                9200663706693917720ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                3625001161774533009ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value | 0ull << 32
            }, {7316213611084365413ull, 0, 1, 0ull << 32}, {
                7316213611084365413ull,
                sizeof(QObject*),
                rustcpp::AlignOf<QObject*>::value,
                rustcpp::Flags<QObject*>::value
            }, {16207431697476881391ull, 0, 1, 1ull << 32}, {
                16207431697476881391ull,
                sizeof(QObject*),
                rustcpp::AlignOf<QObject*>::value,
                rustcpp::Flags<QObject*>::value
            }, {1529574746773345989ull, 0, 1, 2ull << 32}, {
                1529574746773345989ull,
                sizeof(QObject*),
                rustcpp::AlignOf<QObject*>::value,
                rustcpp::Flags<QObject*>::value
            }, {4149722869045358259ull, 0, 1, 3ull << 32}, {
                4149722869045358259ull,
                sizeof(QObject*),
                rustcpp::AlignOf<QObject*>::value,
                rustcpp::Flags<QObject*>::value
            }, {686368431444686277ull, 0, 1, 4ull << 32}, {
                686368431444686277ull,
                sizeof(QObject*),
                rustcpp::AlignOf<QObject*>::value,
                rustcpp::Flags<QObject*>::value
            }, {
                12186555131501271858ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value | 5ull << 32
            }, {
                12186555131501271858ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                6192503056678899645ull,
                sizeof(std::unique_ptr<QPainter>),
                rustcpp::AlignOf<std::unique_ptr<QPainter>>::value,
                rustcpp::Flags<std::unique_ptr<QPainter>>::value | 5ull << 32
            }, {
                6192503056678899645ull,
                sizeof(QImage*),
                rustcpp::AlignOf<QImage*>::value,
                rustcpp::Flags<QImage*>::value
            }, {
                6096198544540142962ull,
                sizeof(QImage),
                rustcpp::AlignOf<QImage>::value,
                rustcpp::Flags<QImage>::value | 5ull << 32
            }, {
                6096198544540142962ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                6096198544540142962ull,
                sizeof(uchar*),
                rustcpp::AlignOf<uchar*>::value,
                rustcpp::Flags<uchar*>::value
            }, {
                6096198544540142962ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                4315255974229101515ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value | 5ull << 32
            }, {
                4315255974229101515ull,
                sizeof(std::unique_ptr<SlintTypeErasedWidget>*),
                rustcpp::AlignOf<std::unique_ptr<SlintTypeErasedWidget>*>::value,
                rustcpp::Flags<std::unique_ptr<SlintTypeErasedWidget>*>::value
            }, {
                8139012612836076910ull,
                sizeof(PainterClipWorkaround),
                rustcpp::AlignOf<PainterClipWorkaround>::value,
                rustcpp::Flags<PainterClipWorkaround>::value | 5ull << 32
            }, {
                8139012612836076910ull,
                sizeof(const QPainterPtr*),
                rustcpp::AlignOf<const QPainterPtr*>::value,
                rustcpp::Flags<const QPainterPtr*>::value
            }, {
                16606810250010842990ull,
                sizeof(QPixmap),
                rustcpp::AlignOf<QPixmap>::value,
                rustcpp::Flags<QPixmap>::value | 5ull << 32
            }, {
                16606810250010842990ull,
                sizeof(QStyle::StandardPixmap),
                rustcpp::AlignOf<QStyle::StandardPixmap>::value,
                rustcpp::Flags<QStyle::StandardPixmap>::value
            }, {
                16606810250010842990ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                358552825561738260ull,
                sizeof(std::unique_ptr<SlintTypeErasedWidget>),
                rustcpp::AlignOf<std::unique_ptr<SlintTypeErasedWidget>>::value,
                rustcpp::Flags<std::unique_ptr<SlintTypeErasedWidget>>::value | 5ull << 32
            }, {
                358552825561738260ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value
            }, {
                3711893757478371062ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value | 5ull << 32
            }, {
                3711893757478371062ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                3711893757478371062ull,
                sizeof(QPixmap),
                rustcpp::AlignOf<QPixmap>::value,
                rustcpp::Flags<QPixmap>::value
            }, {
                3711893757478371062ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {14843504169015304306ull, 0, 1, 5ull << 32}, {
                14843504169015304306ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                14843504169015304306ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                14843504169015304306ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                14843504169015304306ull,
                sizeof(QPixmap),
                rustcpp::AlignOf<QPixmap>::value,
                rustcpp::Flags<QPixmap>::value
            }, {
                14843504169015304306ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                14843504169015304306ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                14843504169015304306ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                14843504169015304306ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                14843504169015304306ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                14843504169015304306ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                14843504169015304306ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                14843504169015304306ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                14843504169015304306ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                14843504169015304306ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                18186952347232860371ull,
                sizeof(std::unique_ptr<SlintTypeErasedWidget>),
                rustcpp::AlignOf<std::unique_ptr<SlintTypeErasedWidget>>::value,
                rustcpp::Flags<std::unique_ptr<SlintTypeErasedWidget>>::value | 5ull << 32
            }, {
                18186952347232860371ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value
            }, {
                15339094767538042650ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value | 5ull << 32
            }, {
                15339094767538042650ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                15339094767538042650ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {6073782150258495012ull, 0, 1, 5ull << 32}, {
                6073782150258495012ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                6073782150258495012ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                6073782150258495012ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                6073782150258495012ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                6073782150258495012ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                6073782150258495012ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                6073782150258495012ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                6073782150258495012ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                6073782150258495012ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                6073782150258495012ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                11963895434059072372ull,
                sizeof(std::unique_ptr<SlintTypeErasedWidget>),
                rustcpp::AlignOf<std::unique_ptr<SlintTypeErasedWidget>>::value,
                rustcpp::Flags<std::unique_ptr<SlintTypeErasedWidget>>::value | 5ull << 32
            }, {
                11963895434059072372ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value
            }, {
                10722652064409612584ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value | 5ull << 32
            }, {
                10722652064409612584ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                10722652064409612584ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                10722652064409612584ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                10722652064409612584ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                17522428396251933491ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value | 5ull << 32
            }, {
                17522428396251933491ull,
                sizeof(QPoint),
                rustcpp::AlignOf<QPoint>::value,
                rustcpp::Flags<QPoint>::value
            }, {
                17522428396251933491ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                17522428396251933491ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                17522428396251933491ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                17522428396251933491ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                17522428396251933491ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                2801373047854216747ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value | 5ull << 32
            }, {
                5938390886433030019ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value | 5ull << 32
            }, {1750780715751966469ull, 0, 1, 5ull << 32}, {
                1750780715751966469ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                1750780715751966469ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                1750780715751966469ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                1750780715751966469ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                1750780715751966469ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                1750780715751966469ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                1750780715751966469ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                1750780715751966469ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                1750780715751966469ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                1750780715751966469ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                1750780715751966469ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                4749406847778199920ull,
                sizeof(std::unique_ptr<SlintTypeErasedWidget>),
                rustcpp::AlignOf<std::unique_ptr<SlintTypeErasedWidget>>::value,
                rustcpp::Flags<std::unique_ptr<SlintTypeErasedWidget>>::value | 5ull << 32
            }, {
                4749406847778199920ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value
            }, {
                13282999944449134685ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value | 5ull << 32
            }, {
                13282999944449134685ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                13282999944449134685ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                13282999944449134685ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                13282999944449134685ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                13282999944449134685ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                13282999944449134685ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                13282999944449134685ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                13282999944449134685ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                2562186376167245879ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value | 5ull << 32
            }, {
                2562186376167245879ull,
                sizeof(QPoint),
                rustcpp::AlignOf<QPoint>::value,
                rustcpp::Flags<QPoint>::value
            }, {
                2562186376167245879ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                2562186376167245879ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                2562186376167245879ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                2562186376167245879ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                2562186376167245879ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                2562186376167245879ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                2562186376167245879ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                2562186376167245879ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                2562186376167245879ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {4010681789533541199ull, 0, 1, 5ull << 32}, {
                4010681789533541199ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                4010681789533541199ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                4010681789533541199ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                4010681789533541199ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                4010681789533541199ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                4010681789533541199ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                4010681789533541199ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                4010681789533541199ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                4010681789533541199ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                4010681789533541199ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                4010681789533541199ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                4010681789533541199ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                4010681789533541199ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                4986632113096374611ull,
                sizeof(std::unique_ptr<SlintTypeErasedWidget>),
                rustcpp::AlignOf<std::unique_ptr<SlintTypeErasedWidget>>::value,
                rustcpp::Flags<std::unique_ptr<SlintTypeErasedWidget>>::value | 5ull << 32
            }, {
                4986632113096374611ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value
            }, {
                13057911347941358840ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value | 5ull << 32
            }, {
                13057911347941358840ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                13057911347941358840ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {8761041358880682527ull, 0, 1, 5ull << 32}, {
                8761041358880682527ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                8761041358880682527ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                8761041358880682527ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                8761041358880682527ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                8761041358880682527ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                8761041358880682527ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                10973510286653386267ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value | 5ull << 32
            }, {
                10973510286653386267ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                15963318591300117537ull,
                sizeof(std::unique_ptr<SlintTypeErasedWidget>),
                rustcpp::AlignOf<std::unique_ptr<SlintTypeErasedWidget>>::value,
                rustcpp::Flags<std::unique_ptr<SlintTypeErasedWidget>>::value | 5ull << 32
            }, {
                15963318591300117537ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value
            }, {
                2436717643017272063ull,
                sizeof(QMargins),
                rustcpp::AlignOf<QMargins>::value,
                rustcpp::Flags<QMargins>::value | 5ull << 32
            }, {
                2436717643017272063ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {12135192898540604015ull, 0, 1, 5ull << 32}, {
                12135192898540604015ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                12135192898540604015ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                12135192898540604015ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                12135192898540604015ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                12135192898540604015ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                12135192898540604015ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                12135192898540604015ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                5340870668741211730ull,
                sizeof(std::unique_ptr<SlintTypeErasedWidget>),
                rustcpp::AlignOf<std::unique_ptr<SlintTypeErasedWidget>>::value,
                rustcpp::Flags<std::unique_ptr<SlintTypeErasedWidget>>::value | 5ull << 32
            }, {
                5340870668741211730ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value
            }, {
                3798652648335511663ull,
                sizeof(QMargins),
                rustcpp::AlignOf<QMargins>::value,
                rustcpp::Flags<QMargins>::value | 5ull << 32
            }, {403437355621553844ull, 0, 1, 5ull << 32}, {
                403437355621553844ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                403437355621553844ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                403437355621553844ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                403437355621553844ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                403437355621553844ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                403437355621553844ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                403437355621553844ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                9990096098687644718ull,
                sizeof(std::unique_ptr<SlintTypeErasedWidget>),
                rustcpp::AlignOf<std::unique_ptr<SlintTypeErasedWidget>>::value,
                rustcpp::Flags<std::unique_ptr<SlintTypeErasedWidget>>::value | 5ull << 32
            }, {
                9990096098687644718ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value
            }, {
                18440509822070786489ull,
                sizeof(QMargins),
                rustcpp::AlignOf<QMargins>::value,
                rustcpp::Flags<QMargins>::value | 5ull << 32
            }, {
                14509979239950317062ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value | 5ull << 32
            }, {
                14509979239950317062ull,
                sizeof(QPoint),
                rustcpp::AlignOf<QPoint>::value,
                rustcpp::Flags<QPoint>::value
            }, {
                14509979239950317062ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                14509979239950317062ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                14509979239950317062ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                14509979239950317062ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                14509979239950317062ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                14509979239950317062ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                14509979239950317062ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                12638606059052988933ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value | 5ull << 32
            }, {
                7264362064048604032ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value | 5ull << 32
            }, {
                7264362064048604032ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                7264362064048604032ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                7264362064048604032ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                7264362064048604032ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                14874288972817923082ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value | 5ull << 32
            }, {
                14874288972817923082ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                14874288972817923082ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                14874288972817923082ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                14874288972817923082ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                14874288972817923082ull,
                sizeof(QMargins),
                rustcpp::AlignOf<QMargins>::value,
                rustcpp::Flags<QMargins>::value
            }, {
                14874288972817923082ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                14874288972817923082ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                14874288972817923082ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                14874288972817923082ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {18247458387525563994ull, 0, 1, 5ull << 32}, {
                18247458387525563994ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                18247458387525563994ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                18247458387525563994ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                18247458387525563994ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                18247458387525563994ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                18247458387525563994ull,
                sizeof(QRectF),
                rustcpp::AlignOf<QRectF>::value,
                rustcpp::Flags<QRectF>::value
            }, {
                18247458387525563994ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                18247458387525563994ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                18247458387525563994ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                18247458387525563994ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                18247458387525563994ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                18247458387525563994ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                11673313264035969848ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value | 5ull << 32
            }, {
                11673313264035969848ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                11673313264035969848ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                11673313264035969848ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {7822264948931615045ull, 0, 1, 5ull << 32}, {
                7822264948931615045ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                7822264948931615045ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                7822264948931615045ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                7822264948931615045ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                7822264948931615045ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                7822264948931615045ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                7822264948931615045ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                7822264948931615045ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                7822264948931615045ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                7822264948931615045ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                7822264948931615045ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                17304023508259932303ull,
                sizeof(std::unique_ptr<SlintTypeErasedWidget>),
                rustcpp::AlignOf<std::unique_ptr<SlintTypeErasedWidget>>::value,
                rustcpp::Flags<std::unique_ptr<SlintTypeErasedWidget>>::value | 5ull << 32
            }, {
                17304023508259932303ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value
            }, {
                9842042231192069352ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value | 5ull << 32
            }, {
                9842042231192069352ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {10582539576836454639ull, 0, 1, 5ull << 32}, {
                10582539576836454639ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                10582539576836454639ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                10582539576836454639ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                10582539576836454639ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                10582539576836454639ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                10582539576836454639ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                10582539576836454639ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                10582539576836454639ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                10582539576836454639ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                10582539576836454639ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                10582539576836454639ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {672031727912196774ull, 0, 1, 5ull << 32}, {
                672031727912196774ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                672031727912196774ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                672031727912196774ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                672031727912196774ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                672031727912196774ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                14982214807313185788ull,
                sizeof(std::unique_ptr<SlintTypeErasedWidget>),
                rustcpp::AlignOf<std::unique_ptr<SlintTypeErasedWidget>>::value,
                rustcpp::Flags<std::unique_ptr<SlintTypeErasedWidget>>::value | 5ull << 32
            }, {
                14982214807313185788ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value
            }, {
                5367423239582594642ull,
                sizeof(TabWidgetMetrics),
                rustcpp::AlignOf<TabWidgetMetrics>::value,
                rustcpp::Flags<TabWidgetMetrics>::value | 5ull << 32
            }, {
                5367423239582594642ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                5367423239582594642ull,
                sizeof(QSizeF),
                rustcpp::AlignOf<QSizeF>::value,
                rustcpp::Flags<QSizeF>::value
            }, {
                5367423239582594642ull,
                sizeof(QSizeF),
                rustcpp::AlignOf<QSizeF>::value,
                rustcpp::Flags<QSizeF>::value
            }, {
                9989742430644401423ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value | 5ull << 32
            }, {
                9989742430644401423ull,
                sizeof(QSizeF),
                rustcpp::AlignOf<QSizeF>::value,
                rustcpp::Flags<QSizeF>::value
            }, {
                9989742430644401423ull,
                sizeof(QSizeF),
                rustcpp::AlignOf<QSizeF>::value,
                rustcpp::Flags<QSizeF>::value
            }, {
                9989742430644401423ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {12746733787558737137ull, 0, 1, 5ull << 32}, {
                12746733787558737137ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                12746733787558737137ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                12746733787558737137ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                12746733787558737137ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                12746733787558737137ull,
                sizeof(QSizeF),
                rustcpp::AlignOf<QSizeF>::value,
                rustcpp::Flags<QSizeF>::value
            }, {
                12746733787558737137ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                2468459335274609921ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value | 5ull << 32
            }, {
                2468459335274609921ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                2468459335274609921ull,
                sizeof(QPixmap),
                rustcpp::AlignOf<QPixmap>::value,
                rustcpp::Flags<QPixmap>::value
            }, {
                2468459335274609921ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                2468459335274609921ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                2468459335274609921ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                3466892205214495409ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value | 5ull << 32
            }, {10288774338165551456ull, 0, 1, 5ull << 32}, {
                10288774338165551456ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                10288774338165551456ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                10288774338165551456ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                10288774338165551456ull,
                sizeof(QPixmap),
                rustcpp::AlignOf<QPixmap>::value,
                rustcpp::Flags<QPixmap>::value
            }, {
                10288774338165551456ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                10288774338165551456ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                10288774338165551456ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                10288774338165551456ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                10288774338165551456ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                10288774338165551456ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                10288774338165551456ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                10288774338165551456ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                10288774338165551456ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                38823387563205963ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value | 5ull << 32
            }, {
                11359973888368234292ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value | 5ull << 32
            }, {
                11359973888368234292ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value
            }, {
                4574639710486581746ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value | 5ull << 32
            }, {
                16601796555330137161ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value | 5ull << 32
            }, {
                12838742386914833748ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value | 5ull << 32
            }, {
                13874773887690146333ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value | 5ull << 32
            }, {
                4752771569616093277ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value | 5ull << 32
            }, {
                11576390817734733773ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value | 5ull << 32
            }, {
                15650811048642184384ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value | 5ull << 32
            }, {
                3312937857332981672ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value | 5ull << 32
            }, {
                13667554797349304447ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value | 5ull << 32
            }, {
                1016739886174290626ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value | 5ull << 32
            }, {
                10276448366224966685ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value | 5ull << 32
            }, {
                643516477108008858ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value | 5ull << 32
            }, {
                12800379137693472340ull,
                sizeof(uint32_t),
                rustcpp::AlignOf<uint32_t>::value,
                rustcpp::Flags<uint32_t>::value | 5ull << 32
            }, {8402334352085785731ull, 0, 1, 5ull << 32}, {
                8402334352085785731ull,
                sizeof(StyleChangeListener*),
                rustcpp::AlignOf<StyleChangeListener*>::value,
                rustcpp::Flags<StyleChangeListener*>::value
            }, {
                8985543812895918383ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value | 5ull << 32
            }, {
                13243925457049350900ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value | 5ull << 32
            }, {
                13223695453319830661ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value | 5ull << 32
            }, {
                5615994801203106006ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value | 5ull << 32
            }, {
                11593647207622327789ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value | 5ull << 32
            }, {
                9206057754558017915ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value | 5ull << 32
            }, {
                8345569266233112597ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value | 5ull << 32
            }, {
                15311581242381027733ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value | 5ull << 32
            }, {
                15311581242381027733ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value
            }, {11162987224734228542ull, 0, 1, 5ull << 32}, {
                11162987224734228542ull,
                sizeof(PaletteStyleChangeListener*),
                rustcpp::AlignOf<PaletteStyleChangeListener*>::value,
                rustcpp::Flags<PaletteStyleChangeListener*>::value
            }, {
                3378788048216831797ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value | 5ull << 32
            }, {
                3378788048216831797ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                3378788048216831797ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                3378788048216831797ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {7527483434982092427ull, 0, 1, 5ull << 32}, {
                7527483434982092427ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                7527483434982092427ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                7527483434982092427ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                7527483434982092427ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                7527483434982092427ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                7527483434982092427ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                7527483434982092427ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                7527483434982092427ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                7527483434982092427ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                7527483434982092427ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {1649062070360772397ull, 0, 1, 5ull << 32}, {
                1649062070360772397ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {464443924098933516ull, 0, 1, 5ull << 32}, {
                464443924098933516ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {12852602435673639350ull, 0, 1, 5ull << 32}, {
                12852602435673639350ull,
                sizeof(QPainterPath*),
                rustcpp::AlignOf<QPainterPath*>::value,
                rustcpp::Flags<QPainterPath*>::value
            }, {
                12852602435673639350ull,
                sizeof(QPointF),
                rustcpp::AlignOf<QPointF>::value,
                rustcpp::Flags<QPointF>::value
            }, {2365821089015888895ull, 0, 1, 5ull << 32}, {
                2365821089015888895ull,
                sizeof(QPainterPath*),
                rustcpp::AlignOf<QPainterPath*>::value,
                rustcpp::Flags<QPainterPath*>::value
            }, {
                2365821089015888895ull,
                sizeof(QPointF),
                rustcpp::AlignOf<QPointF>::value,
                rustcpp::Flags<QPointF>::value
            }, {16352908959648011123ull, 0, 1, 5ull << 32}, {
                16352908959648011123ull,
                sizeof(QPainterPath*),
                rustcpp::AlignOf<QPainterPath*>::value,
                rustcpp::Flags<QPainterPath*>::value
            }, {
                16352908959648011123ull,
                sizeof(QPointF),
                rustcpp::AlignOf<QPointF>::value,
                rustcpp::Flags<QPointF>::value
            }, {
                16352908959648011123ull,
                sizeof(QPointF),
                rustcpp::AlignOf<QPointF>::value,
                rustcpp::Flags<QPointF>::value
            }, {2184623836221718985ull, 0, 1, 5ull << 32}, {
                2184623836221718985ull,
                sizeof(QPainterPath*),
                rustcpp::AlignOf<QPainterPath*>::value,
                rustcpp::Flags<QPainterPath*>::value
            }, {
                2184623836221718985ull,
                sizeof(QPointF),
                rustcpp::AlignOf<QPointF>::value,
                rustcpp::Flags<QPointF>::value
            }, {
                2184623836221718985ull,
                sizeof(QPointF),
                rustcpp::AlignOf<QPointF>::value,
                rustcpp::Flags<QPointF>::value
            }, {
                2184623836221718985ull,
                sizeof(QPointF),
                rustcpp::AlignOf<QPointF>::value,
                rustcpp::Flags<QPointF>::value
            }, {3803775266274234648ull, 0, 1, 5ull << 32}, {
                3803775266274234648ull,
                sizeof(QPainterPath*),
                rustcpp::AlignOf<QPainterPath*>::value,
                rustcpp::Flags<QPainterPath*>::value
            }, {3642031532500415244ull, 0, 1, 5ull << 32}, {
                3642031532500415244ull,
                sizeof(QPainterPath*),
                rustcpp::AlignOf<QPainterPath*>::value,
                rustcpp::Flags<QPainterPath*>::value
            }, {
                3642031532500415244ull,
                sizeof(Qt::FillRule),
                rustcpp::AlignOf<Qt::FillRule>::value,
                rustcpp::Flags<Qt::FillRule>::value
            }, {
                486260135050940837ull,
                sizeof(QBrush),
                rustcpp::AlignOf<QBrush>::value,
                rustcpp::Flags<QBrush>::value | 5ull << 32
            }, {
                486260135050940837ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value
            }, {
                16537301410194668304ull,
                sizeof(QLinearGradient),
                rustcpp::AlignOf<QLinearGradient>::value,
                rustcpp::Flags<QLinearGradient>::value | 5ull << 32
            }, {
                16537301410194668304ull,
                sizeof(QPointF),
                rustcpp::AlignOf<QPointF>::value,
                rustcpp::Flags<QPointF>::value
            }, {
                16537301410194668304ull,
                sizeof(QPointF),
                rustcpp::AlignOf<QPointF>::value,
                rustcpp::Flags<QPointF>::value
            }, {14349155111584591723ull, 0, 1, 5ull << 32}, {
                14349155111584591723ull,
                sizeof(QLinearGradient),
                rustcpp::AlignOf<QLinearGradient>::value,
                rustcpp::Flags<QLinearGradient>::value
            }, {
                14349155111584591723ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                14349155111584591723ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value
            }, {
                17558158200359373769ull,
                sizeof(QBrush),
                rustcpp::AlignOf<QBrush>::value,
                rustcpp::Flags<QBrush>::value | 5ull << 32
            }, {
                17558158200359373769ull,
                sizeof(QLinearGradient),
                rustcpp::AlignOf<QLinearGradient>::value,
                rustcpp::Flags<QLinearGradient>::value
            }, {
                1258256177269320827ull,
                sizeof(QRadialGradient),
                rustcpp::AlignOf<QRadialGradient>::value,
                rustcpp::Flags<QRadialGradient>::value | 5ull << 32
            }, {
                1258256177269320827ull,
                sizeof(qreal),
                rustcpp::AlignOf<qreal>::value,
                rustcpp::Flags<qreal>::value
            }, {
                1258256177269320827ull,
                sizeof(qreal),
                rustcpp::AlignOf<qreal>::value,
                rustcpp::Flags<qreal>::value
            }, {7378051255955452620ull, 0, 1, 5ull << 32}, {
                7378051255955452620ull,
                sizeof(QRadialGradient),
                rustcpp::AlignOf<QRadialGradient>::value,
                rustcpp::Flags<QRadialGradient>::value
            }, {
                7378051255955452620ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                7378051255955452620ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value
            }, {
                16716437033865551237ull,
                sizeof(QBrush),
                rustcpp::AlignOf<QBrush>::value,
                rustcpp::Flags<QBrush>::value | 5ull << 32
            }, {
                16716437033865551237ull,
                sizeof(QRadialGradient),
                rustcpp::AlignOf<QRadialGradient>::value,
                rustcpp::Flags<QRadialGradient>::value
            }, {10719911171513569396ull, 0, 1, 5ull << 32}, {
                10719911171513569396ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                10719911171513569396ull,
                sizeof(QBrush),
                rustcpp::AlignOf<QBrush>::value,
                rustcpp::Flags<QBrush>::value
            }, {
                10719911171513569396ull,
                sizeof(QRectF),
                rustcpp::AlignOf<QRectF>::value,
                rustcpp::Flags<QRectF>::value
            }, {540285221162230364ull, 0, 1, 5ull << 32}, {
                540285221162230364ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                540285221162230364ull,
                sizeof(QRectF),
                rustcpp::AlignOf<QRectF>::value,
                rustcpp::Flags<QRectF>::value
            }, {
                540285221162230364ull,
                sizeof(QBrush),
                rustcpp::AlignOf<QBrush>::value,
                rustcpp::Flags<QBrush>::value
            }, {
                540285221162230364ull,
                sizeof(QBrush),
                rustcpp::AlignOf<QBrush>::value,
                rustcpp::Flags<QBrush>::value
            }, {
                540285221162230364ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                540285221162230364ull,
                sizeof(QFont),
                rustcpp::AlignOf<QFont>::value,
                rustcpp::Flags<QFont>::value
            }, {
                540285221162230364ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                540285221162230364ull,
                sizeof(Qt::Alignment),
                rustcpp::AlignOf<Qt::Alignment>::value,
                rustcpp::Flags<Qt::Alignment>::value
            }, {
                540285221162230364ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                540285221162230364ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                540285221162230364ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                540285221162230364ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                540285221162230364ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {4105647935001844544ull, 0, 1, 5ull << 32}, {
                4105647935001844544ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                4105647935001844544ull,
                sizeof(QRectF),
                rustcpp::AlignOf<QRectF>::value,
                rustcpp::Flags<QRectF>::value
            }, {
                4105647935001844544ull,
                sizeof(QBrush),
                rustcpp::AlignOf<QBrush>::value,
                rustcpp::Flags<QBrush>::value
            }, {
                4105647935001844544ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value
            }, {
                4105647935001844544ull,
                sizeof(QRgb),
                rustcpp::AlignOf<QRgb>::value,
                rustcpp::Flags<QRgb>::value
            }, {
                4105647935001844544ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                4105647935001844544ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                4105647935001844544ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                4105647935001844544ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                4105647935001844544ull,
                sizeof(QFont),
                rustcpp::AlignOf<QFont>::value,
                rustcpp::Flags<QFont>::value
            }, {
                4105647935001844544ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                4105647935001844544ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                4105647935001844544ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                4105647935001844544ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {853280220912364950ull, 0, 1, 5ull << 32}, {
                853280220912364950ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                853280220912364950ull,
                sizeof(QPoint),
                rustcpp::AlignOf<QPoint>::value,
                rustcpp::Flags<QPoint>::value
            }, {
                853280220912364950ull,
                sizeof(QPainterPath),
                rustcpp::AlignOf<QPainterPath>::value,
                rustcpp::Flags<QPainterPath>::value
            }, {
                853280220912364950ull,
                sizeof(QBrush),
                rustcpp::AlignOf<QBrush>::value,
                rustcpp::Flags<QBrush>::value
            }, {
                853280220912364950ull,
                sizeof(QBrush),
                rustcpp::AlignOf<QBrush>::value,
                rustcpp::Flags<QBrush>::value
            }, {
                853280220912364950ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                1522131389279688610ull,
                sizeof(QPainterPtr),
                rustcpp::AlignOf<QPainterPtr>::value,
                rustcpp::Flags<QPainterPtr>::value | 5ull << 32
            }, {
                1522131389279688610ull,
                sizeof(QImage*),
                rustcpp::AlignOf<QImage*>::value,
                rustcpp::Flags<QImage*>::value
            }, {
                3376788343252054843ull,
                sizeof(QPixmap),
                rustcpp::AlignOf<QPixmap>::value,
                rustcpp::Flags<QPixmap>::value | 5ull << 32
            }, {
                3376788343252054843ull,
                sizeof(QImage*),
                rustcpp::AlignOf<QImage*>::value,
                rustcpp::Flags<QImage*>::value
            }, {
                3376788343252054843ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                16201730587410762266ull,
                sizeof(QPixmap),
                rustcpp::AlignOf<QPixmap>::value,
                rustcpp::Flags<QPixmap>::value | 5ull << 32
            }, {
                16201730587410762266ull,
                sizeof(QImage*),
                rustcpp::AlignOf<QImage*>::value,
                rustcpp::Flags<QImage*>::value
            }, {8901884381653659609ull, 0, 1, 5ull << 32}, {
                8901884381653659609ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                8901884381653659609ull,
                sizeof(QPointF),
                rustcpp::AlignOf<QPointF>::value,
                rustcpp::Flags<QPointF>::value
            }, {
                8901884381653659609ull,
                sizeof(QPixmap),
                rustcpp::AlignOf<QPixmap>::value,
                rustcpp::Flags<QPixmap>::value
            }, {
                4005499549141126962ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value | 5ull << 32
            }, {
                4005499549141126962ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                4005499549141126962ull,
                sizeof(QRectF),
                rustcpp::AlignOf<QRectF>::value,
                rustcpp::Flags<QRectF>::value
            }, {
                4005499549141126962ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                4005499549141126962ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                4005499549141126962ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                4005499549141126962ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                4142581747713064936ull,
                sizeof(QRectF),
                rustcpp::AlignOf<QRectF>::value,
                rustcpp::Flags<QRectF>::value | 5ull << 32
            }, {
                4142581747713064936ull,
                sizeof(const QPainterPtr*),
                rustcpp::AlignOf<const QPainterPtr*>::value,
                rustcpp::Flags<const QPainterPtr*>::value
            }, {5518309140305952661ull, 0, 1, 5ull << 32}, {
                5518309140305952661ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                5518309140305952661ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                5518309140305952661ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                5518309140305952661ull,
                sizeof(const unsigned char *),
                rustcpp::AlignOf<const unsigned char *>::value,
                rustcpp::Flags<const unsigned char *>::value
            }, {13866301048610829791ull, 0, 1, 5ull << 32}, {
                13866301048610829791ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                13866301048610829791ull,
                sizeof(QBrush),
                rustcpp::AlignOf<QBrush>::value,
                rustcpp::Flags<QBrush>::value
            }, {
                13866301048610829791ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                13866301048610829791ull,
                sizeof(QFont),
                rustcpp::AlignOf<QFont>::value,
                rustcpp::Flags<QFont>::value
            }, {6185362906572090699ull, 0, 1, 5ull << 32}, {
                6185362906572090699ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                6185362906572090699ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                6185362906572090699ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {8657648301843346995ull, 0, 1, 5ull << 32}, {
                8657648301843346995ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                8657648301843346995ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {3811314287807305976ull, 0, 1, 5ull << 32}, {
                3811314287807305976ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                3811314287807305976ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                344045398902059685ull,
                sizeof(QPixmap),
                rustcpp::AlignOf<QPixmap>::value,
                rustcpp::Flags<QPixmap>::value | 5ull << 32
            }, {
                344045398902059685ull,
                sizeof(QImage::Format),
                rustcpp::AlignOf<QImage::Format>::value,
                rustcpp::Flags<QImage::Format>::value
            }, {
                344045398902059685ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                344045398902059685ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                344045398902059685ull,
                sizeof(uint32_t),
                rustcpp::AlignOf<uint32_t>::value,
                rustcpp::Flags<uint32_t>::value
            }, {
                344045398902059685ull,
                sizeof(const uchar *),
                rustcpp::AlignOf<const uchar *>::value,
                rustcpp::Flags<const uchar *>::value
            }, {12468714679373021499ull, 0, 1, 5ull << 32}, {
                12468714679373021499ull,
                sizeof(QPixmap),
                rustcpp::AlignOf<QPixmap>::value,
                rustcpp::Flags<QPixmap>::value
            }, {
                12468714679373021499ull,
                sizeof(QBrush),
                rustcpp::AlignOf<QBrush>::value,
                rustcpp::Flags<QBrush>::value
            }, {6386766718153401618ull, 0, 1, 5ull << 32}, {
                6386766718153401618ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                6386766718153401618ull,
                sizeof(QPixmap),
                rustcpp::AlignOf<QPixmap>::value,
                rustcpp::Flags<QPixmap>::value
            }, {
                6386766718153401618ull,
                sizeof(QRectF),
                rustcpp::AlignOf<QRectF>::value,
                rustcpp::Flags<QRectF>::value
            }, {
                6386766718153401618ull,
                sizeof(QRectF),
                rustcpp::AlignOf<QRectF>::value,
                rustcpp::Flags<QRectF>::value
            }, {
                6386766718153401618ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                6386766718153401618ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                6386766718153401618ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                6386766718153401618ull,
                sizeof(QPoint),
                rustcpp::AlignOf<QPoint>::value,
                rustcpp::Flags<QPoint>::value
            }, {9823922925559717700ull, 0, 1, 5ull << 32}, {
                9823922925559717700ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                9823922925559717700ull,
                sizeof(QPixmap),
                rustcpp::AlignOf<QPixmap>::value,
                rustcpp::Flags<QPixmap>::value
            }, {
                9823922925559717700ull,
                sizeof(QRectF),
                rustcpp::AlignOf<QRectF>::value,
                rustcpp::Flags<QRectF>::value
            }, {
                9823922925559717700ull,
                sizeof(QRectF),
                rustcpp::AlignOf<QRectF>::value,
                rustcpp::Flags<QRectF>::value
            }, {
                9823922925559717700ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {14694546065196372407ull, 0, 1, 5ull << 32}, {
                14694546065196372407ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                14694546065196372407ull,
                sizeof(QBrush),
                rustcpp::AlignOf<QBrush>::value,
                rustcpp::Flags<QBrush>::value
            }, {
                14694546065196372407ull,
                sizeof(QBrush),
                rustcpp::AlignOf<QBrush>::value,
                rustcpp::Flags<QBrush>::value
            }, {
                14694546065196372407ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                14694546065196372407ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                14694546065196372407ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                14694546065196372407ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                14694546065196372407ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                14694546065196372407ull,
                sizeof(QRectF),
                rustcpp::AlignOf<QRectF>::value,
                rustcpp::Flags<QRectF>::value
            }, {
                10617709909169143064ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value | 5ull << 32
            }, {
                10617709909169143064ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                17054483328645168010ull,
                sizeof(QPainterPtr),
                rustcpp::AlignOf<QPainterPtr>::value,
                rustcpp::Flags<QPainterPtr>::value | 5ull << 32
            }, {
                17054483328645168010ull,
                sizeof(QImage*),
                rustcpp::AlignOf<QImage*>::value,
                rustcpp::Flags<QImage*>::value
            }, {
                17054483328645168010ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {9891812740514992603ull, 0, 1, 5ull << 32}, {
                9891812740514992603ull,
                sizeof(QPainterPtr*),
                rustcpp::AlignOf<QPainterPtr*>::value,
                rustcpp::Flags<QPainterPtr*>::value
            }, {
                9891812740514992603ull,
                sizeof(QPixmap*),
                rustcpp::AlignOf<QPixmap*>::value,
                rustcpp::Flags<QPixmap*>::value
            }, {9359914316805131505ull, 0, 1, 5ull << 32}, {
                9359914316805131505ull,
                sizeof(SlintWidget*),
                rustcpp::AlignOf<SlintWidget*>::value,
                rustcpp::Flags<SlintWidget*>::value
            }, {
                4450188545556432904ull,
                sizeof(std::unique_ptr<QWidget, QWidgetDeleteLater>),
                rustcpp::AlignOf<std::unique_ptr<QWidget, QWidgetDeleteLater>>::value,
                rustcpp::Flags<std::unique_ptr<QWidget, QWidgetDeleteLater>>::value | 5ull << 32
            }, {
                4450188545556432904ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value
            }, {10532412091371046783ull, 0, 1, 5ull << 32}, {
                10532412091371046783ull,
                sizeof(SlintWidget*),
                rustcpp::AlignOf<SlintWidget*>::value,
                rustcpp::Flags<SlintWidget*>::value
            }, {
                10532412091371046783ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value
            }, {8717079145132141262ull, 0, 1, 5ull << 32}, {
                8717079145132141262ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                952623391652831975ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value | 5ull << 32
            }, {
                952623391652831975ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                11858850094086137533ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value | 5ull << 32
            }, {
                11858850094086137533ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                5304224080370648665ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value | 5ull << 32
            }, {
                5304224080370648665ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {11551986095512863757ull, 0, 1, 5ull << 32}, {
                11551986095512863757ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {3670146560777811635ull, 0, 1, 5ull << 32}, {
                3670146560777811635ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                13994133164806549231ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value | 5ull << 32
            }, {4299892459750497637ull, 0, 1, 5ull << 32}, {
                4299892459750497637ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                11068078868944764816ull,
                sizeof(QPoint),
                rustcpp::AlignOf<QPoint>::value,
                rustcpp::Flags<QPoint>::value | 5ull << 32
            }, {
                11068078868944764816ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {17581564638369524671ull, 0, 1, 5ull << 32}, {
                17581564638369524671ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                17581564638369524671ull,
                sizeof(QPoint),
                rustcpp::AlignOf<QPoint>::value,
                rustcpp::Flags<QPoint>::value
            }, {2297686687320278477ull, 0, 1, 5ull << 32}, {
                2297686687320278477ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                2297686687320278477ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                17017393042878158597ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value | 5ull << 32
            }, {
                17017393042878158597ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {13332991410370037354ull, 0, 1, 5ull << 32}, {
                13332991410370037354ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {5026805549942774157ull, 0, 1, 5ull << 32}, {
                5026805549942774157ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                5026805549942774157ull,
                sizeof(QPixmap),
                rustcpp::AlignOf<QPixmap>::value,
                rustcpp::Flags<QPixmap>::value
            }, {924442104871289070ull, 0, 1, 5ull << 32}, {
                924442104871289070ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                924442104871289070ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                924442104871289070ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                924442104871289070ull,
                sizeof(QBrush),
                rustcpp::AlignOf<QBrush>::value,
                rustcpp::Flags<QBrush>::value
            }, {
                924442104871289070ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                924442104871289070ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                924442104871289070ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                924442104871289070ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                924442104871289070ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {17841906502778211716ull, 0, 1, 5ull << 32}, {
                17841906502778211716ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                17841906502778211716ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {
                17841906502778211716ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {18352940533039372166ull, 0, 1, 5ull << 32}, {
                18352940533039372166ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                18352940533039372166ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                18352940533039372166ull,
                sizeof(QPoint),
                rustcpp::AlignOf<QPoint>::value,
                rustcpp::Flags<QPoint>::value
            }, {
                18352940533039372166ull,
                sizeof(QSize),
                rustcpp::AlignOf<QSize>::value,
                rustcpp::Flags<QSize>::value
            }, {8908923102365601556ull, 0, 1, 5ull << 32}, {
                8908923102365601556ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                8908923102365601556ull,
                sizeof(Qt::CursorShape),
                rustcpp::AlignOf<Qt::CursorShape>::value,
                rustcpp::Flags<Qt::CursorShape>::value
            }, {5734903486017716914ull, 0, 1, 5ull << 32}, {
                5734903486017716914ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {4327348512357289730ull, 0, 1, 5ull << 32}, {
                4327348512357289730ull,
                sizeof(SlintWidget*),
                rustcpp::AlignOf<SlintWidget*>::value,
                rustcpp::Flags<SlintWidget*>::value
            }, {5883359174670135531ull, 0, 1, 5ull << 32}, {
                5883359174670135531ull,
                sizeof(SlintWidget*),
                rustcpp::AlignOf<SlintWidget*>::value,
                rustcpp::Flags<SlintWidget*>::value
            }, {
                5883359174670135531ull,
                sizeof(QRectF),
                rustcpp::AlignOf<QRectF>::value,
                rustcpp::Flags<QRectF>::value
            }, {
                5883359174670135531ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                5883359174670135531ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                5883359174670135531ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {12521012638284443808ull, 0, 1, 5ull << 32}, {
                12521012638284443808ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                12521012638284443808ull,
                sizeof(void*),
                rustcpp::AlignOf<void*>::value,
                rustcpp::Flags<void*>::value
            }, {
                11308899529623633931ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value | 5ull << 32
            }, {6982890402279296689ull, 0, 1, 5ull << 32}, {
                6982890402279296689ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                7748995736964865514ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value | 5ull << 32
            }, {
                7748995736964865514ull,
                sizeof(QFont),
                rustcpp::AlignOf<QFont>::value,
                rustcpp::Flags<QFont>::value
            }, {
                7748995736964865514ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                7748995736964865514ull,
                sizeof(QPointF),
                rustcpp::AlignOf<QPointF>::value,
                rustcpp::Flags<QPointF>::value
            }, {
                7748995736964865514ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                7748995736964865514ull,
                sizeof(QRectF),
                rustcpp::AlignOf<QRectF>::value,
                rustcpp::Flags<QRectF>::value
            }, {
                7748995736964865514ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                198325185678795165ull,
                sizeof(QRectF),
                rustcpp::AlignOf<QRectF>::value,
                rustcpp::Flags<QRectF>::value | 5ull << 32
            }, {
                198325185678795165ull,
                sizeof(QFont),
                rustcpp::AlignOf<QFont>::value,
                rustcpp::Flags<QFont>::value
            }, {
                198325185678795165ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                198325185678795165ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                198325185678795165ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                198325185678795165ull,
                sizeof(QRectF),
                rustcpp::AlignOf<QRectF>::value,
                rustcpp::Flags<QRectF>::value
            }, {
                198325185678795165ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {4516979229772369728ull, 0, 1, 5ull << 32}, {
                4516979229772369728ull,
                sizeof(QByteArray),
                rustcpp::AlignOf<QByteArray>::value,
                rustcpp::Flags<QByteArray>::value
            }, {3107730970131331686ull, 0, 1, 5ull << 32}, {
                3107730970131331686ull,
                sizeof(QByteArray),
                rustcpp::AlignOf<QByteArray>::value,
                rustcpp::Flags<QByteArray>::value
            }, {
                7737936390355430275ull,
                sizeof(QByteArray),
                rustcpp::AlignOf<QByteArray>::value,
                rustcpp::Flags<QByteArray>::value | 5ull << 32
            }, {
                7737936390355430275ull,
                sizeof(QWidget*),
                rustcpp::AlignOf<QWidget*>::value,
                rustcpp::Flags<QWidget*>::value
            }, {
                1322110927532504243ull,
                sizeof(QFont),
                rustcpp::AlignOf<QFont>::value,
                rustcpp::Flags<QFont>::value | 5ull << 32
            }, {
                1322110927532504243ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                1322110927532504243ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                1322110927532504243ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                1322110927532504243ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {
                1322110927532504243ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                18332541034312886950ull,
                sizeof(QSizeF),
                rustcpp::AlignOf<QSizeF>::value,
                rustcpp::Flags<QSizeF>::value | 5ull << 32
            }, {
                18332541034312886950ull,
                sizeof(const QFontMetricsF*),
                rustcpp::AlignOf<const QFontMetricsF*>::value,
                rustcpp::Flags<const QFontMetricsF*>::value
            }, {
                18332541034312886950ull,
                sizeof(QString),
                rustcpp::AlignOf<QString>::value,
                rustcpp::Flags<QString>::value
            }, {
                18332541034312886950ull,
                sizeof(QRectF),
                rustcpp::AlignOf<QRectF>::value,
                rustcpp::Flags<QRectF>::value
            }, {
                18332541034312886950ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value
            }, {
                1812819827079014435ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value | 5ull << 32
            }, {
                1812819827079014435ull,
                sizeof(const QFontMetricsF*),
                rustcpp::AlignOf<const QFontMetricsF*>::value,
                rustcpp::Flags<const QFontMetricsF*>::value
            }, {
                5140672074059531875ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value | 5ull << 32
            }, {
                5140672074059531875ull,
                sizeof(const QFontMetricsF*),
                rustcpp::AlignOf<const QFontMetricsF*>::value,
                rustcpp::Flags<const QFontMetricsF*>::value
            }, {
                7703331374348149874ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value | 5ull << 32
            }, {
                7703331374348149874ull,
                sizeof(const QFontMetricsF*),
                rustcpp::AlignOf<const QFontMetricsF*>::value,
                rustcpp::Flags<const QFontMetricsF*>::value
            }, {
                3878667728888164284ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value | 5ull << 32
            }, {
                3878667728888164284ull,
                sizeof(const QFontMetricsF*),
                rustcpp::AlignOf<const QFontMetricsF*>::value,
                rustcpp::Flags<const QFontMetricsF*>::value
            }, {
                6601650662320055390ull,
                sizeof(QFontMetricsF),
                rustcpp::AlignOf<QFontMetricsF>::value,
                rustcpp::Flags<QFontMetricsF>::value | 5ull << 32
            }, {
                6601650662320055390ull,
                sizeof(const QFont *),
                rustcpp::AlignOf<const QFont *>::value,
                rustcpp::Flags<const QFont *>::value
            }, {12726909694270947669ull, 0, 1, 5ull << 32}, {
                12726909694270947669ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value
            }, {
                11513168694657110643ull,
                sizeof(int),
                rustcpp::AlignOf<int>::value,
                rustcpp::Flags<int>::value | 5ull << 32
            }, {
                1895410512180021537ull,
                sizeof(std::unique_ptr<SlintTypeErasedWidget>),
                rustcpp::AlignOf<std::unique_ptr<SlintTypeErasedWidget>>::value,
                rustcpp::Flags<std::unique_ptr<SlintTypeErasedWidget>>::value
            }, {
                1764849004744599263ull,
                sizeof(PainterClipWorkaround),
                rustcpp::AlignOf<PainterClipWorkaround>::value,
                rustcpp::Flags<PainterClipWorkaround>::value
            }, {
                1185910526579773062ull,
                sizeof(QPainterPtr),
                rustcpp::AlignOf<QPainterPtr>::value,
                rustcpp::Flags<QPainterPtr>::value
            }, {
                1334557360505652988ull,
                sizeof(QPainterPath),
                rustcpp::AlignOf<QPainterPath>::value,
                rustcpp::Flags<QPainterPath>::value
            }, {
                6628039610634793268ull,
                sizeof(QLinearGradient),
                rustcpp::AlignOf<QLinearGradient>::value,
                rustcpp::Flags<QLinearGradient>::value
            }, {
                16344133575315880939ull,
                sizeof(QRadialGradient),
                rustcpp::AlignOf<QRadialGradient>::value,
                rustcpp::Flags<QRadialGradient>::value
            }, {
                373445754053516773ull,
                sizeof(std::unique_ptr<QWidget, QWidgetDeleteLater>),
                rustcpp::AlignOf<std::unique_ptr<QWidget, QWidgetDeleteLater>>::value,
                rustcpp::Flags<std::unique_ptr<QWidget, QWidgetDeleteLater>>::value
            }, {
                8532611036576937110ull,
                sizeof(QFontMetricsF),
                rustcpp::AlignOf<QFontMetricsF>::value,
                rustcpp::Flags<QFontMetricsF>::value
            }, {
                12915468682700672051ull,
                sizeof(QFont),
                rustcpp::AlignOf<QFont>::value,
                rustcpp::Flags<QFont>::value
            } }
};

} // namespace rustcpp
